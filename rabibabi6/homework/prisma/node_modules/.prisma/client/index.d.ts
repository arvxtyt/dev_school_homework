
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Seller
 * 
 */
export type Seller = $Result.DefaultSelection<Prisma.$SellerPayload>
/**
 * Model Buyer
 * 
 */
export type Buyer = $Result.DefaultSelection<Prisma.$BuyerPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Guarant
 * 
 */
export type Guarant = $Result.DefaultSelection<Prisma.$GuarantPayload>
/**
 * Model TransferService
 * 
 */
export type TransferService = $Result.DefaultSelection<Prisma.$TransferServicePayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Storage
 * 
 */
export type Storage = $Result.DefaultSelection<Prisma.$StoragePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sellers
 * const sellers = await prisma.seller.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sellers
   * const sellers = await prisma.seller.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.seller`: Exposes CRUD operations for the **Seller** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sellers
    * const sellers = await prisma.seller.findMany()
    * ```
    */
  get seller(): Prisma.SellerDelegate<ExtArgs>;

  /**
   * `prisma.buyer`: Exposes CRUD operations for the **Buyer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buyers
    * const buyers = await prisma.buyer.findMany()
    * ```
    */
  get buyer(): Prisma.BuyerDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.guarant`: Exposes CRUD operations for the **Guarant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guarants
    * const guarants = await prisma.guarant.findMany()
    * ```
    */
  get guarant(): Prisma.GuarantDelegate<ExtArgs>;

  /**
   * `prisma.transferService`: Exposes CRUD operations for the **TransferService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransferServices
    * const transferServices = await prisma.transferService.findMany()
    * ```
    */
  get transferService(): Prisma.TransferServiceDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs>;

  /**
   * `prisma.storage`: Exposes CRUD operations for the **Storage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Storages
    * const storages = await prisma.storage.findMany()
    * ```
    */
  get storage(): Prisma.StorageDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Seller: 'Seller',
    Buyer: 'Buyer',
    Category: 'Category',
    Item: 'Item',
    Comment: 'Comment',
    Guarant: 'Guarant',
    TransferService: 'TransferService',
    Department: 'Department',
    Storage: 'Storage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'seller' | 'buyer' | 'category' | 'item' | 'comment' | 'guarant' | 'transferService' | 'department' | 'storage'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Seller: {
        payload: Prisma.$SellerPayload<ExtArgs>
        fields: Prisma.SellerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SellerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SellerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          findFirst: {
            args: Prisma.SellerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SellerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          findMany: {
            args: Prisma.SellerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>[]
          }
          create: {
            args: Prisma.SellerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          createMany: {
            args: Prisma.SellerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SellerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          update: {
            args: Prisma.SellerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          deleteMany: {
            args: Prisma.SellerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SellerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SellerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          aggregate: {
            args: Prisma.SellerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSeller>
          }
          groupBy: {
            args: Prisma.SellerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SellerGroupByOutputType>[]
          }
          count: {
            args: Prisma.SellerCountArgs<ExtArgs>,
            result: $Utils.Optional<SellerCountAggregateOutputType> | number
          }
        }
      }
      Buyer: {
        payload: Prisma.$BuyerPayload<ExtArgs>
        fields: Prisma.BuyerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuyerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuyerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          findFirst: {
            args: Prisma.BuyerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuyerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          findMany: {
            args: Prisma.BuyerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>[]
          }
          create: {
            args: Prisma.BuyerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          createMany: {
            args: Prisma.BuyerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BuyerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          update: {
            args: Prisma.BuyerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          deleteMany: {
            args: Prisma.BuyerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BuyerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BuyerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          aggregate: {
            args: Prisma.BuyerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBuyer>
          }
          groupBy: {
            args: Prisma.BuyerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BuyerGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuyerCountArgs<ExtArgs>,
            result: $Utils.Optional<BuyerCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>,
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Guarant: {
        payload: Prisma.$GuarantPayload<ExtArgs>
        fields: Prisma.GuarantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuarantFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuarantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuarantFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuarantPayload>
          }
          findFirst: {
            args: Prisma.GuarantFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuarantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuarantFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuarantPayload>
          }
          findMany: {
            args: Prisma.GuarantFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuarantPayload>[]
          }
          create: {
            args: Prisma.GuarantCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuarantPayload>
          }
          createMany: {
            args: Prisma.GuarantCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GuarantDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuarantPayload>
          }
          update: {
            args: Prisma.GuarantUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuarantPayload>
          }
          deleteMany: {
            args: Prisma.GuarantDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GuarantUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GuarantUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuarantPayload>
          }
          aggregate: {
            args: Prisma.GuarantAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGuarant>
          }
          groupBy: {
            args: Prisma.GuarantGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GuarantGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuarantCountArgs<ExtArgs>,
            result: $Utils.Optional<GuarantCountAggregateOutputType> | number
          }
        }
      }
      TransferService: {
        payload: Prisma.$TransferServicePayload<ExtArgs>
        fields: Prisma.TransferServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransferServiceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransferServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransferServiceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransferServicePayload>
          }
          findFirst: {
            args: Prisma.TransferServiceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransferServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransferServiceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransferServicePayload>
          }
          findMany: {
            args: Prisma.TransferServiceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransferServicePayload>[]
          }
          create: {
            args: Prisma.TransferServiceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransferServicePayload>
          }
          createMany: {
            args: Prisma.TransferServiceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TransferServiceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransferServicePayload>
          }
          update: {
            args: Prisma.TransferServiceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransferServicePayload>
          }
          deleteMany: {
            args: Prisma.TransferServiceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TransferServiceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TransferServiceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransferServicePayload>
          }
          aggregate: {
            args: Prisma.TransferServiceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransferService>
          }
          groupBy: {
            args: Prisma.TransferServiceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransferServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransferServiceCountArgs<ExtArgs>,
            result: $Utils.Optional<TransferServiceCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>,
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Storage: {
        payload: Prisma.$StoragePayload<ExtArgs>
        fields: Prisma.StorageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StorageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoragePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StorageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoragePayload>
          }
          findFirst: {
            args: Prisma.StorageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoragePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StorageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoragePayload>
          }
          findMany: {
            args: Prisma.StorageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoragePayload>[]
          }
          create: {
            args: Prisma.StorageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoragePayload>
          }
          createMany: {
            args: Prisma.StorageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StorageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoragePayload>
          }
          update: {
            args: Prisma.StorageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoragePayload>
          }
          deleteMany: {
            args: Prisma.StorageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StorageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StorageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoragePayload>
          }
          aggregate: {
            args: Prisma.StorageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStorage>
          }
          groupBy: {
            args: Prisma.StorageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StorageGroupByOutputType>[]
          }
          count: {
            args: Prisma.StorageCountArgs<ExtArgs>,
            result: $Utils.Optional<StorageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SellerCountOutputType
   */

  export type SellerCountOutputType = {
    most_frequent_buyers: number
    Guarant: number
  }

  export type SellerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    most_frequent_buyers?: boolean | SellerCountOutputTypeCountMost_frequent_buyersArgs
    Guarant?: boolean | SellerCountOutputTypeCountGuarantArgs
  }

  // Custom InputTypes

  /**
   * SellerCountOutputType without action
   */
  export type SellerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerCountOutputType
     */
    select?: SellerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SellerCountOutputType without action
   */
  export type SellerCountOutputTypeCountMost_frequent_buyersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerWhereInput
  }


  /**
   * SellerCountOutputType without action
   */
  export type SellerCountOutputTypeCountGuarantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuarantWhereInput
  }



  /**
   * Count Type BuyerCountOutputType
   */

  export type BuyerCountOutputType = {
    Comment: number
  }

  export type BuyerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Comment?: boolean | BuyerCountOutputTypeCountCommentArgs
  }

  // Custom InputTypes

  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerCountOutputType
     */
    select?: BuyerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }



  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    Seller: number
    placed_items: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Seller?: boolean | CategoryCountOutputTypeCountSellerArgs
    placed_items?: boolean | CategoryCountOutputTypeCountPlaced_itemsArgs
  }

  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSellerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SellerWhereInput
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountPlaced_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }



  /**
   * Count Type GuarantCountOutputType
   */

  export type GuarantCountOutputType = {
    Buyer: number
  }

  export type GuarantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Buyer?: boolean | GuarantCountOutputTypeCountBuyerArgs
  }

  // Custom InputTypes

  /**
   * GuarantCountOutputType without action
   */
  export type GuarantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuarantCountOutputType
     */
    select?: GuarantCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GuarantCountOutputType without action
   */
  export type GuarantCountOutputTypeCountBuyerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerWhereInput
  }



  /**
   * Count Type TransferServiceCountOutputType
   */

  export type TransferServiceCountOutputType = {
    storages: number
    departments: number
    guarants: number
  }

  export type TransferServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    storages?: boolean | TransferServiceCountOutputTypeCountStoragesArgs
    departments?: boolean | TransferServiceCountOutputTypeCountDepartmentsArgs
    guarants?: boolean | TransferServiceCountOutputTypeCountGuarantsArgs
  }

  // Custom InputTypes

  /**
   * TransferServiceCountOutputType without action
   */
  export type TransferServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferServiceCountOutputType
     */
    select?: TransferServiceCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TransferServiceCountOutputType without action
   */
  export type TransferServiceCountOutputTypeCountStoragesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StorageWhereInput
  }


  /**
   * TransferServiceCountOutputType without action
   */
  export type TransferServiceCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }


  /**
   * TransferServiceCountOutputType without action
   */
  export type TransferServiceCountOutputTypeCountGuarantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuarantWhereInput
  }



  /**
   * Count Type StorageCountOutputType
   */

  export type StorageCountOutputType = {
    buyers: number
    sellers: number
    guarants: number
  }

  export type StorageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyers?: boolean | StorageCountOutputTypeCountBuyersArgs
    sellers?: boolean | StorageCountOutputTypeCountSellersArgs
    guarants?: boolean | StorageCountOutputTypeCountGuarantsArgs
  }

  // Custom InputTypes

  /**
   * StorageCountOutputType without action
   */
  export type StorageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageCountOutputType
     */
    select?: StorageCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StorageCountOutputType without action
   */
  export type StorageCountOutputTypeCountBuyersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerWhereInput
  }


  /**
   * StorageCountOutputType without action
   */
  export type StorageCountOutputTypeCountSellersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SellerWhereInput
  }


  /**
   * StorageCountOutputType without action
   */
  export type StorageCountOutputTypeCountGuarantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuarantWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Seller
   */

  export type AggregateSeller = {
    _count: SellerCountAggregateOutputType | null
    _avg: SellerAvgAggregateOutputType | null
    _sum: SellerSumAggregateOutputType | null
    _min: SellerMinAggregateOutputType | null
    _max: SellerMaxAggregateOutputType | null
  }

  export type SellerAvgAggregateOutputType = {
    id: number | null
    sold_items: number | null
    total_items_placed: number | null
    items_placed_now: number | null
    categoryId: number | null
    storageId: number | null
  }

  export type SellerSumAggregateOutputType = {
    id: number | null
    sold_items: number | null
    total_items_placed: number | null
    items_placed_now: number | null
    categoryId: number | null
    storageId: number | null
  }

  export type SellerMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    birth_date: Date | null
    bio: string | null
    last_time_online: Date | null
    sold_items: number | null
    joined: Date | null
    total_items_placed: number | null
    items_placed_now: number | null
    categoryId: number | null
    storageId: number | null
  }

  export type SellerMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    birth_date: Date | null
    bio: string | null
    last_time_online: Date | null
    sold_items: number | null
    joined: Date | null
    total_items_placed: number | null
    items_placed_now: number | null
    categoryId: number | null
    storageId: number | null
  }

  export type SellerCountAggregateOutputType = {
    id: number
    createdAt: number
    first_name: number
    middle_name: number
    last_name: number
    birth_date: number
    bio: number
    last_time_online: number
    sold_items: number
    joined: number
    total_items_placed: number
    items_placed_now: number
    categoryId: number
    storageId: number
    _all: number
  }


  export type SellerAvgAggregateInputType = {
    id?: true
    sold_items?: true
    total_items_placed?: true
    items_placed_now?: true
    categoryId?: true
    storageId?: true
  }

  export type SellerSumAggregateInputType = {
    id?: true
    sold_items?: true
    total_items_placed?: true
    items_placed_now?: true
    categoryId?: true
    storageId?: true
  }

  export type SellerMinAggregateInputType = {
    id?: true
    createdAt?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    birth_date?: true
    bio?: true
    last_time_online?: true
    sold_items?: true
    joined?: true
    total_items_placed?: true
    items_placed_now?: true
    categoryId?: true
    storageId?: true
  }

  export type SellerMaxAggregateInputType = {
    id?: true
    createdAt?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    birth_date?: true
    bio?: true
    last_time_online?: true
    sold_items?: true
    joined?: true
    total_items_placed?: true
    items_placed_now?: true
    categoryId?: true
    storageId?: true
  }

  export type SellerCountAggregateInputType = {
    id?: true
    createdAt?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    birth_date?: true
    bio?: true
    last_time_online?: true
    sold_items?: true
    joined?: true
    total_items_placed?: true
    items_placed_now?: true
    categoryId?: true
    storageId?: true
    _all?: true
  }

  export type SellerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seller to aggregate.
     */
    where?: SellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sellers to fetch.
     */
    orderBy?: SellerOrderByWithRelationInput | SellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sellers
    **/
    _count?: true | SellerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SellerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SellerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SellerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SellerMaxAggregateInputType
  }

  export type GetSellerAggregateType<T extends SellerAggregateArgs> = {
        [P in keyof T & keyof AggregateSeller]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeller[P]>
      : GetScalarType<T[P], AggregateSeller[P]>
  }




  export type SellerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SellerWhereInput
    orderBy?: SellerOrderByWithAggregationInput | SellerOrderByWithAggregationInput[]
    by: SellerScalarFieldEnum[] | SellerScalarFieldEnum
    having?: SellerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SellerCountAggregateInputType | true
    _avg?: SellerAvgAggregateInputType
    _sum?: SellerSumAggregateInputType
    _min?: SellerMinAggregateInputType
    _max?: SellerMaxAggregateInputType
  }

  export type SellerGroupByOutputType = {
    id: number
    createdAt: Date
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date
    bio: string | null
    last_time_online: Date
    sold_items: number
    joined: Date
    total_items_placed: number
    items_placed_now: number
    categoryId: number | null
    storageId: number | null
    _count: SellerCountAggregateOutputType | null
    _avg: SellerAvgAggregateOutputType | null
    _sum: SellerSumAggregateOutputType | null
    _min: SellerMinAggregateOutputType | null
    _max: SellerMaxAggregateOutputType | null
  }

  type GetSellerGroupByPayload<T extends SellerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SellerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SellerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SellerGroupByOutputType[P]>
            : GetScalarType<T[P], SellerGroupByOutputType[P]>
        }
      >
    >


  export type SellerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    birth_date?: boolean
    bio?: boolean
    last_time_online?: boolean
    sold_items?: boolean
    joined?: boolean
    total_items_placed?: boolean
    items_placed_now?: boolean
    categoryId?: boolean
    storageId?: boolean
    most_frequent_buyers?: boolean | Seller$most_frequent_buyersArgs<ExtArgs>
    favourite_category?: boolean | Seller$favourite_categoryArgs<ExtArgs>
    Storage?: boolean | Seller$StorageArgs<ExtArgs>
    Guarant?: boolean | Seller$GuarantArgs<ExtArgs>
    _count?: boolean | SellerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seller"]>

  export type SellerSelectScalar = {
    id?: boolean
    createdAt?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    birth_date?: boolean
    bio?: boolean
    last_time_online?: boolean
    sold_items?: boolean
    joined?: boolean
    total_items_placed?: boolean
    items_placed_now?: boolean
    categoryId?: boolean
    storageId?: boolean
  }

  export type SellerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    most_frequent_buyers?: boolean | Seller$most_frequent_buyersArgs<ExtArgs>
    favourite_category?: boolean | Seller$favourite_categoryArgs<ExtArgs>
    Storage?: boolean | Seller$StorageArgs<ExtArgs>
    Guarant?: boolean | Seller$GuarantArgs<ExtArgs>
    _count?: boolean | SellerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SellerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Seller"
    objects: {
      most_frequent_buyers: Prisma.$BuyerPayload<ExtArgs>[]
      favourite_category: Prisma.$CategoryPayload<ExtArgs> | null
      Storage: Prisma.$StoragePayload<ExtArgs> | null
      Guarant: Prisma.$GuarantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      first_name: string
      middle_name: string
      last_name: string
      birth_date: Date
      bio: string | null
      last_time_online: Date
      sold_items: number
      joined: Date
      total_items_placed: number
      items_placed_now: number
      categoryId: number | null
      storageId: number | null
    }, ExtArgs["result"]["seller"]>
    composites: {}
  }


  type SellerGetPayload<S extends boolean | null | undefined | SellerDefaultArgs> = $Result.GetResult<Prisma.$SellerPayload, S>

  type SellerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SellerFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SellerCountAggregateInputType | true
    }

  export interface SellerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Seller'], meta: { name: 'Seller' } }
    /**
     * Find zero or one Seller that matches the filter.
     * @param {SellerFindUniqueArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SellerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SellerFindUniqueArgs<ExtArgs>>
    ): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Seller that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SellerFindUniqueOrThrowArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SellerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SellerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Seller that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerFindFirstArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SellerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SellerFindFirstArgs<ExtArgs>>
    ): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Seller that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerFindFirstOrThrowArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SellerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SellerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sellers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sellers
     * const sellers = await prisma.seller.findMany()
     * 
     * // Get first 10 Sellers
     * const sellers = await prisma.seller.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sellerWithIdOnly = await prisma.seller.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SellerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SellerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Seller.
     * @param {SellerCreateArgs} args - Arguments to create a Seller.
     * @example
     * // Create one Seller
     * const Seller = await prisma.seller.create({
     *   data: {
     *     // ... data to create a Seller
     *   }
     * })
     * 
    **/
    create<T extends SellerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SellerCreateArgs<ExtArgs>>
    ): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sellers.
     *     @param {SellerCreateManyArgs} args - Arguments to create many Sellers.
     *     @example
     *     // Create many Sellers
     *     const seller = await prisma.seller.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SellerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SellerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Seller.
     * @param {SellerDeleteArgs} args - Arguments to delete one Seller.
     * @example
     * // Delete one Seller
     * const Seller = await prisma.seller.delete({
     *   where: {
     *     // ... filter to delete one Seller
     *   }
     * })
     * 
    **/
    delete<T extends SellerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SellerDeleteArgs<ExtArgs>>
    ): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Seller.
     * @param {SellerUpdateArgs} args - Arguments to update one Seller.
     * @example
     * // Update one Seller
     * const seller = await prisma.seller.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SellerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SellerUpdateArgs<ExtArgs>>
    ): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sellers.
     * @param {SellerDeleteManyArgs} args - Arguments to filter Sellers to delete.
     * @example
     * // Delete a few Sellers
     * const { count } = await prisma.seller.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SellerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SellerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sellers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sellers
     * const seller = await prisma.seller.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SellerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SellerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Seller.
     * @param {SellerUpsertArgs} args - Arguments to update or create a Seller.
     * @example
     * // Update or create a Seller
     * const seller = await prisma.seller.upsert({
     *   create: {
     *     // ... data to create a Seller
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seller we want to update
     *   }
     * })
    **/
    upsert<T extends SellerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SellerUpsertArgs<ExtArgs>>
    ): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sellers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerCountArgs} args - Arguments to filter Sellers to count.
     * @example
     * // Count the number of Sellers
     * const count = await prisma.seller.count({
     *   where: {
     *     // ... the filter for the Sellers we want to count
     *   }
     * })
    **/
    count<T extends SellerCountArgs>(
      args?: Subset<T, SellerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SellerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seller.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SellerAggregateArgs>(args: Subset<T, SellerAggregateArgs>): Prisma.PrismaPromise<GetSellerAggregateType<T>>

    /**
     * Group by Seller.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SellerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SellerGroupByArgs['orderBy'] }
        : { orderBy?: SellerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SellerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSellerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Seller model
   */
  readonly fields: SellerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Seller.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SellerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    most_frequent_buyers<T extends Seller$most_frequent_buyersArgs<ExtArgs> = {}>(args?: Subset<T, Seller$most_frequent_buyersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'findMany'> | Null>;

    favourite_category<T extends Seller$favourite_categoryArgs<ExtArgs> = {}>(args?: Subset<T, Seller$favourite_categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Storage<T extends Seller$StorageArgs<ExtArgs> = {}>(args?: Subset<T, Seller$StorageArgs<ExtArgs>>): Prisma__StorageClient<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Guarant<T extends Seller$GuarantArgs<ExtArgs> = {}>(args?: Subset<T, Seller$GuarantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Seller model
   */ 
  interface SellerFieldRefs {
    readonly id: FieldRef<"Seller", 'Int'>
    readonly createdAt: FieldRef<"Seller", 'DateTime'>
    readonly first_name: FieldRef<"Seller", 'String'>
    readonly middle_name: FieldRef<"Seller", 'String'>
    readonly last_name: FieldRef<"Seller", 'String'>
    readonly birth_date: FieldRef<"Seller", 'DateTime'>
    readonly bio: FieldRef<"Seller", 'String'>
    readonly last_time_online: FieldRef<"Seller", 'DateTime'>
    readonly sold_items: FieldRef<"Seller", 'Int'>
    readonly joined: FieldRef<"Seller", 'DateTime'>
    readonly total_items_placed: FieldRef<"Seller", 'Int'>
    readonly items_placed_now: FieldRef<"Seller", 'Int'>
    readonly categoryId: FieldRef<"Seller", 'Int'>
    readonly storageId: FieldRef<"Seller", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Seller findUnique
   */
  export type SellerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter, which Seller to fetch.
     */
    where: SellerWhereUniqueInput
  }


  /**
   * Seller findUniqueOrThrow
   */
  export type SellerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter, which Seller to fetch.
     */
    where: SellerWhereUniqueInput
  }


  /**
   * Seller findFirst
   */
  export type SellerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter, which Seller to fetch.
     */
    where?: SellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sellers to fetch.
     */
    orderBy?: SellerOrderByWithRelationInput | SellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sellers.
     */
    cursor?: SellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sellers.
     */
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * Seller findFirstOrThrow
   */
  export type SellerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter, which Seller to fetch.
     */
    where?: SellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sellers to fetch.
     */
    orderBy?: SellerOrderByWithRelationInput | SellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sellers.
     */
    cursor?: SellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sellers.
     */
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * Seller findMany
   */
  export type SellerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter, which Sellers to fetch.
     */
    where?: SellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sellers to fetch.
     */
    orderBy?: SellerOrderByWithRelationInput | SellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sellers.
     */
    cursor?: SellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sellers.
     */
    skip?: number
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * Seller create
   */
  export type SellerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * The data needed to create a Seller.
     */
    data: XOR<SellerCreateInput, SellerUncheckedCreateInput>
  }


  /**
   * Seller createMany
   */
  export type SellerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sellers.
     */
    data: SellerCreateManyInput | SellerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Seller update
   */
  export type SellerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * The data needed to update a Seller.
     */
    data: XOR<SellerUpdateInput, SellerUncheckedUpdateInput>
    /**
     * Choose, which Seller to update.
     */
    where: SellerWhereUniqueInput
  }


  /**
   * Seller updateMany
   */
  export type SellerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sellers.
     */
    data: XOR<SellerUpdateManyMutationInput, SellerUncheckedUpdateManyInput>
    /**
     * Filter which Sellers to update
     */
    where?: SellerWhereInput
  }


  /**
   * Seller upsert
   */
  export type SellerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * The filter to search for the Seller to update in case it exists.
     */
    where: SellerWhereUniqueInput
    /**
     * In case the Seller found by the `where` argument doesn't exist, create a new Seller with this data.
     */
    create: XOR<SellerCreateInput, SellerUncheckedCreateInput>
    /**
     * In case the Seller was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SellerUpdateInput, SellerUncheckedUpdateInput>
  }


  /**
   * Seller delete
   */
  export type SellerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter which Seller to delete.
     */
    where: SellerWhereUniqueInput
  }


  /**
   * Seller deleteMany
   */
  export type SellerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sellers to delete
     */
    where?: SellerWhereInput
  }


  /**
   * Seller.most_frequent_buyers
   */
  export type Seller$most_frequent_buyersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    where?: BuyerWhereInput
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    cursor?: BuyerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }


  /**
   * Seller.favourite_category
   */
  export type Seller$favourite_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }


  /**
   * Seller.Storage
   */
  export type Seller$StorageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    where?: StorageWhereInput
  }


  /**
   * Seller.Guarant
   */
  export type Seller$GuarantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    where?: GuarantWhereInput
    orderBy?: GuarantOrderByWithRelationInput | GuarantOrderByWithRelationInput[]
    cursor?: GuarantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuarantScalarFieldEnum | GuarantScalarFieldEnum[]
  }


  /**
   * Seller without action
   */
  export type SellerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
  }



  /**
   * Model Buyer
   */

  export type AggregateBuyer = {
    _count: BuyerCountAggregateOutputType | null
    _avg: BuyerAvgAggregateOutputType | null
    _sum: BuyerSumAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
  }

  export type BuyerAvgAggregateOutputType = {
    id: number | null
    bought_items: number | null
    sellerId: number | null
    storageId: number | null
    guarantId: number | null
  }

  export type BuyerSumAggregateOutputType = {
    id: number | null
    bought_items: number | null
    sellerId: number | null
    storageId: number | null
    guarantId: number | null
  }

  export type BuyerMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    birth_date: Date | null
    bio: string | null
    last_time_online: Date | null
    bought_items: number | null
    joined: Date | null
    sellerId: number | null
    storageId: number | null
    guarantId: number | null
  }

  export type BuyerMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    birth_date: Date | null
    bio: string | null
    last_time_online: Date | null
    bought_items: number | null
    joined: Date | null
    sellerId: number | null
    storageId: number | null
    guarantId: number | null
  }

  export type BuyerCountAggregateOutputType = {
    id: number
    createdAt: number
    first_name: number
    middle_name: number
    last_name: number
    birth_date: number
    bio: number
    last_time_online: number
    bought_items: number
    joined: number
    sellerId: number
    storageId: number
    guarantId: number
    _all: number
  }


  export type BuyerAvgAggregateInputType = {
    id?: true
    bought_items?: true
    sellerId?: true
    storageId?: true
    guarantId?: true
  }

  export type BuyerSumAggregateInputType = {
    id?: true
    bought_items?: true
    sellerId?: true
    storageId?: true
    guarantId?: true
  }

  export type BuyerMinAggregateInputType = {
    id?: true
    createdAt?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    birth_date?: true
    bio?: true
    last_time_online?: true
    bought_items?: true
    joined?: true
    sellerId?: true
    storageId?: true
    guarantId?: true
  }

  export type BuyerMaxAggregateInputType = {
    id?: true
    createdAt?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    birth_date?: true
    bio?: true
    last_time_online?: true
    bought_items?: true
    joined?: true
    sellerId?: true
    storageId?: true
    guarantId?: true
  }

  export type BuyerCountAggregateInputType = {
    id?: true
    createdAt?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    birth_date?: true
    bio?: true
    last_time_online?: true
    bought_items?: true
    joined?: true
    sellerId?: true
    storageId?: true
    guarantId?: true
    _all?: true
  }

  export type BuyerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buyer to aggregate.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Buyers
    **/
    _count?: true | BuyerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuyerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuyerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyerMaxAggregateInputType
  }

  export type GetBuyerAggregateType<T extends BuyerAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyer[P]>
      : GetScalarType<T[P], AggregateBuyer[P]>
  }




  export type BuyerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerWhereInput
    orderBy?: BuyerOrderByWithAggregationInput | BuyerOrderByWithAggregationInput[]
    by: BuyerScalarFieldEnum[] | BuyerScalarFieldEnum
    having?: BuyerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyerCountAggregateInputType | true
    _avg?: BuyerAvgAggregateInputType
    _sum?: BuyerSumAggregateInputType
    _min?: BuyerMinAggregateInputType
    _max?: BuyerMaxAggregateInputType
  }

  export type BuyerGroupByOutputType = {
    id: number
    createdAt: Date
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date
    bio: string | null
    last_time_online: Date
    bought_items: number
    joined: Date
    sellerId: number | null
    storageId: number | null
    guarantId: number
    _count: BuyerCountAggregateOutputType | null
    _avg: BuyerAvgAggregateOutputType | null
    _sum: BuyerSumAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
  }

  type GetBuyerGroupByPayload<T extends BuyerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuyerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyerGroupByOutputType[P]>
            : GetScalarType<T[P], BuyerGroupByOutputType[P]>
        }
      >
    >


  export type BuyerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    birth_date?: boolean
    bio?: boolean
    last_time_online?: boolean
    bought_items?: boolean
    joined?: boolean
    sellerId?: boolean
    storageId?: boolean
    guarantId?: boolean
    Seller?: boolean | Buyer$SellerArgs<ExtArgs>
    Storage?: boolean | Buyer$StorageArgs<ExtArgs>
    guarant?: boolean | GuarantDefaultArgs<ExtArgs>
    Comment?: boolean | Buyer$CommentArgs<ExtArgs>
    _count?: boolean | BuyerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyer"]>

  export type BuyerSelectScalar = {
    id?: boolean
    createdAt?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    birth_date?: boolean
    bio?: boolean
    last_time_online?: boolean
    bought_items?: boolean
    joined?: boolean
    sellerId?: boolean
    storageId?: boolean
    guarantId?: boolean
  }

  export type BuyerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Seller?: boolean | Buyer$SellerArgs<ExtArgs>
    Storage?: boolean | Buyer$StorageArgs<ExtArgs>
    guarant?: boolean | GuarantDefaultArgs<ExtArgs>
    Comment?: boolean | Buyer$CommentArgs<ExtArgs>
    _count?: boolean | BuyerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BuyerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Buyer"
    objects: {
      Seller: Prisma.$SellerPayload<ExtArgs> | null
      Storage: Prisma.$StoragePayload<ExtArgs> | null
      guarant: Prisma.$GuarantPayload<ExtArgs>
      Comment: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      first_name: string
      middle_name: string
      last_name: string
      birth_date: Date
      bio: string | null
      last_time_online: Date
      bought_items: number
      joined: Date
      sellerId: number | null
      storageId: number | null
      guarantId: number
    }, ExtArgs["result"]["buyer"]>
    composites: {}
  }


  type BuyerGetPayload<S extends boolean | null | undefined | BuyerDefaultArgs> = $Result.GetResult<Prisma.$BuyerPayload, S>

  type BuyerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BuyerFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BuyerCountAggregateInputType | true
    }

  export interface BuyerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Buyer'], meta: { name: 'Buyer' } }
    /**
     * Find zero or one Buyer that matches the filter.
     * @param {BuyerFindUniqueArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BuyerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BuyerFindUniqueArgs<ExtArgs>>
    ): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Buyer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BuyerFindUniqueOrThrowArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BuyerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Buyer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindFirstArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BuyerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyerFindFirstArgs<ExtArgs>>
    ): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Buyer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindFirstOrThrowArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BuyerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Buyers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buyers
     * const buyers = await prisma.buyer.findMany()
     * 
     * // Get first 10 Buyers
     * const buyers = await prisma.buyer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buyerWithIdOnly = await prisma.buyer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BuyerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Buyer.
     * @param {BuyerCreateArgs} args - Arguments to create a Buyer.
     * @example
     * // Create one Buyer
     * const Buyer = await prisma.buyer.create({
     *   data: {
     *     // ... data to create a Buyer
     *   }
     * })
     * 
    **/
    create<T extends BuyerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BuyerCreateArgs<ExtArgs>>
    ): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Buyers.
     *     @param {BuyerCreateManyArgs} args - Arguments to create many Buyers.
     *     @example
     *     // Create many Buyers
     *     const buyer = await prisma.buyer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BuyerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Buyer.
     * @param {BuyerDeleteArgs} args - Arguments to delete one Buyer.
     * @example
     * // Delete one Buyer
     * const Buyer = await prisma.buyer.delete({
     *   where: {
     *     // ... filter to delete one Buyer
     *   }
     * })
     * 
    **/
    delete<T extends BuyerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BuyerDeleteArgs<ExtArgs>>
    ): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Buyer.
     * @param {BuyerUpdateArgs} args - Arguments to update one Buyer.
     * @example
     * // Update one Buyer
     * const buyer = await prisma.buyer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BuyerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BuyerUpdateArgs<ExtArgs>>
    ): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Buyers.
     * @param {BuyerDeleteManyArgs} args - Arguments to filter Buyers to delete.
     * @example
     * // Delete a few Buyers
     * const { count } = await prisma.buyer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BuyerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buyers
     * const buyer = await prisma.buyer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BuyerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BuyerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Buyer.
     * @param {BuyerUpsertArgs} args - Arguments to update or create a Buyer.
     * @example
     * // Update or create a Buyer
     * const buyer = await prisma.buyer.upsert({
     *   create: {
     *     // ... data to create a Buyer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Buyer we want to update
     *   }
     * })
    **/
    upsert<T extends BuyerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BuyerUpsertArgs<ExtArgs>>
    ): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerCountArgs} args - Arguments to filter Buyers to count.
     * @example
     * // Count the number of Buyers
     * const count = await prisma.buyer.count({
     *   where: {
     *     // ... the filter for the Buyers we want to count
     *   }
     * })
    **/
    count<T extends BuyerCountArgs>(
      args?: Subset<T, BuyerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyerAggregateArgs>(args: Subset<T, BuyerAggregateArgs>): Prisma.PrismaPromise<GetBuyerAggregateType<T>>

    /**
     * Group by Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyerGroupByArgs['orderBy'] }
        : { orderBy?: BuyerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Buyer model
   */
  readonly fields: BuyerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Buyer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuyerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Seller<T extends Buyer$SellerArgs<ExtArgs> = {}>(args?: Subset<T, Buyer$SellerArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Storage<T extends Buyer$StorageArgs<ExtArgs> = {}>(args?: Subset<T, Buyer$StorageArgs<ExtArgs>>): Prisma__StorageClient<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    guarant<T extends GuarantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GuarantDefaultArgs<ExtArgs>>): Prisma__GuarantClient<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Comment<T extends Buyer$CommentArgs<ExtArgs> = {}>(args?: Subset<T, Buyer$CommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Buyer model
   */ 
  interface BuyerFieldRefs {
    readonly id: FieldRef<"Buyer", 'Int'>
    readonly createdAt: FieldRef<"Buyer", 'DateTime'>
    readonly first_name: FieldRef<"Buyer", 'String'>
    readonly middle_name: FieldRef<"Buyer", 'String'>
    readonly last_name: FieldRef<"Buyer", 'String'>
    readonly birth_date: FieldRef<"Buyer", 'DateTime'>
    readonly bio: FieldRef<"Buyer", 'String'>
    readonly last_time_online: FieldRef<"Buyer", 'DateTime'>
    readonly bought_items: FieldRef<"Buyer", 'Int'>
    readonly joined: FieldRef<"Buyer", 'DateTime'>
    readonly sellerId: FieldRef<"Buyer", 'Int'>
    readonly storageId: FieldRef<"Buyer", 'Int'>
    readonly guarantId: FieldRef<"Buyer", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Buyer findUnique
   */
  export type BuyerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where: BuyerWhereUniqueInput
  }


  /**
   * Buyer findUniqueOrThrow
   */
  export type BuyerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where: BuyerWhereUniqueInput
  }


  /**
   * Buyer findFirst
   */
  export type BuyerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buyers.
     */
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }


  /**
   * Buyer findFirstOrThrow
   */
  export type BuyerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buyers.
     */
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }


  /**
   * Buyer findMany
   */
  export type BuyerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyers to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }


  /**
   * Buyer create
   */
  export type BuyerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The data needed to create a Buyer.
     */
    data: XOR<BuyerCreateInput, BuyerUncheckedCreateInput>
  }


  /**
   * Buyer createMany
   */
  export type BuyerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Buyers.
     */
    data: BuyerCreateManyInput | BuyerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Buyer update
   */
  export type BuyerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The data needed to update a Buyer.
     */
    data: XOR<BuyerUpdateInput, BuyerUncheckedUpdateInput>
    /**
     * Choose, which Buyer to update.
     */
    where: BuyerWhereUniqueInput
  }


  /**
   * Buyer updateMany
   */
  export type BuyerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Buyers.
     */
    data: XOR<BuyerUpdateManyMutationInput, BuyerUncheckedUpdateManyInput>
    /**
     * Filter which Buyers to update
     */
    where?: BuyerWhereInput
  }


  /**
   * Buyer upsert
   */
  export type BuyerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The filter to search for the Buyer to update in case it exists.
     */
    where: BuyerWhereUniqueInput
    /**
     * In case the Buyer found by the `where` argument doesn't exist, create a new Buyer with this data.
     */
    create: XOR<BuyerCreateInput, BuyerUncheckedCreateInput>
    /**
     * In case the Buyer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuyerUpdateInput, BuyerUncheckedUpdateInput>
  }


  /**
   * Buyer delete
   */
  export type BuyerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter which Buyer to delete.
     */
    where: BuyerWhereUniqueInput
  }


  /**
   * Buyer deleteMany
   */
  export type BuyerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buyers to delete
     */
    where?: BuyerWhereInput
  }


  /**
   * Buyer.Seller
   */
  export type Buyer$SellerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    where?: SellerWhereInput
  }


  /**
   * Buyer.Storage
   */
  export type Buyer$StorageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    where?: StorageWhereInput
  }


  /**
   * Buyer.Comment
   */
  export type Buyer$CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Buyer without action
   */
  export type BuyerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
  }



  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    placed_items_number: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    placed_items_number: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    placed_items_number: number | null
    description: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    placed_items_number: number | null
    description: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    placed_items_number: number
    description: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    placed_items_number?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    placed_items_number?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    placed_items_number?: true
    description?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    placed_items_number?: true
    description?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    placed_items_number?: true
    description?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    placed_items_number: number
    description: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    placed_items_number?: boolean
    description?: boolean
    Seller?: boolean | Category$SellerArgs<ExtArgs>
    placed_items?: boolean | Category$placed_itemsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    placed_items_number?: boolean
    description?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Seller?: boolean | Category$SellerArgs<ExtArgs>
    placed_items?: boolean | Category$placed_itemsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      Seller: Prisma.$SellerPayload<ExtArgs>[]
      placed_items: Prisma.$ItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      placed_items_number: number
      description: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }


  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Seller<T extends Category$SellerArgs<ExtArgs> = {}>(args?: Subset<T, Category$SellerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'findMany'> | Null>;

    placed_items<T extends Category$placed_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Category$placed_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly placed_items_number: FieldRef<"Category", 'Int'>
    readonly description: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }


  /**
   * Category.Seller
   */
  export type Category$SellerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    where?: SellerWhereInput
    orderBy?: SellerOrderByWithRelationInput | SellerOrderByWithRelationInput[]
    cursor?: SellerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * Category.placed_items
   */
  export type Category$placed_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }


  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
  }



  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type ItemSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type ItemMinAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    createdAt: Date | null
    placedAt: Date | null
    description: string | null
  }

  export type ItemMaxAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    createdAt: Date | null
    placedAt: Date | null
    description: string | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    categoryId: number
    name: number
    createdAt: number
    placedAt: number
    description: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type ItemSumAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    createdAt?: true
    placedAt?: true
    description?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    createdAt?: true
    placedAt?: true
    description?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    createdAt?: true
    placedAt?: true
    description?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    id: number
    categoryId: number | null
    name: string
    createdAt: Date
    placedAt: Date | null
    description: string
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    createdAt?: boolean
    placedAt?: boolean
    description?: boolean
    Category?: boolean | Item$CategoryArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>

  export type ItemSelectScalar = {
    id?: boolean
    categoryId?: boolean
    name?: boolean
    createdAt?: boolean
    placedAt?: boolean
    description?: boolean
  }

  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Category?: boolean | Item$CategoryArgs<ExtArgs>
  }


  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      Category: Prisma.$CategoryPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryId: number | null
      name: string
      createdAt: Date
      placedAt: Date | null
      description: string
    }, ExtArgs["result"]["item"]>
    composites: {}
  }


  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ItemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Item that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ItemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ItemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
    **/
    create<T extends ItemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ItemCreateArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Items.
     *     @param {ItemCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const item = await prisma.item.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ItemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
    **/
    delete<T extends ItemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ItemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ItemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ItemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
    **/
    upsert<T extends ItemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>
    ): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Category<T extends Item$CategoryArgs<ExtArgs> = {}>(args?: Subset<T, Item$CategoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Item model
   */ 
  interface ItemFieldRefs {
    readonly id: FieldRef<"Item", 'Int'>
    readonly categoryId: FieldRef<"Item", 'Int'>
    readonly name: FieldRef<"Item", 'String'>
    readonly createdAt: FieldRef<"Item", 'DateTime'>
    readonly placedAt: FieldRef<"Item", 'DateTime'>
    readonly description: FieldRef<"Item", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }


  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }


  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }


  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }


  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }


  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }


  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }


  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
  }


  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }


  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }


  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
  }


  /**
   * Item.Category
   */
  export type Item$CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }


  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemInclude<ExtArgs> | null
  }



  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    buyerId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    buyerId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    title: string | null
    body: string | null
    buyerId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    title: string | null
    body: string | null
    buyerId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    title: number
    body: number
    buyerId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    buyerId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    buyerId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    title?: true
    body?: true
    buyerId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    title?: true
    body?: true
    buyerId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    title?: true
    body?: true
    buyerId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    title: string
    body: string
    buyerId: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    body?: boolean
    buyerId?: boolean
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    title?: boolean
    body?: boolean
    buyerId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
  }


  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      buyer: Prisma.$BuyerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      body: string
      buyerId: number
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }


  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentCreateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    buyer<T extends BuyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuyerDefaultArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly title: FieldRef<"Comment", 'String'>
    readonly body: FieldRef<"Comment", 'String'>
    readonly buyerId: FieldRef<"Comment", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }


  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
  }



  /**
   * Model Guarant
   */

  export type AggregateGuarant = {
    _count: GuarantCountAggregateOutputType | null
    _avg: GuarantAvgAggregateOutputType | null
    _sum: GuarantSumAggregateOutputType | null
    _min: GuarantMinAggregateOutputType | null
    _max: GuarantMaxAggregateOutputType | null
  }

  export type GuarantAvgAggregateOutputType = {
    id: number | null
    sellerId: number | null
    transferServiceId: number | null
    storageId: number | null
  }

  export type GuarantSumAggregateOutputType = {
    id: number | null
    sellerId: number | null
    transferServiceId: number | null
    storageId: number | null
  }

  export type GuarantMinAggregateOutputType = {
    id: number | null
    sellerId: number | null
    transferServiceId: number | null
    storageId: number | null
  }

  export type GuarantMaxAggregateOutputType = {
    id: number | null
    sellerId: number | null
    transferServiceId: number | null
    storageId: number | null
  }

  export type GuarantCountAggregateOutputType = {
    id: number
    sellerId: number
    transferServiceId: number
    storageId: number
    _all: number
  }


  export type GuarantAvgAggregateInputType = {
    id?: true
    sellerId?: true
    transferServiceId?: true
    storageId?: true
  }

  export type GuarantSumAggregateInputType = {
    id?: true
    sellerId?: true
    transferServiceId?: true
    storageId?: true
  }

  export type GuarantMinAggregateInputType = {
    id?: true
    sellerId?: true
    transferServiceId?: true
    storageId?: true
  }

  export type GuarantMaxAggregateInputType = {
    id?: true
    sellerId?: true
    transferServiceId?: true
    storageId?: true
  }

  export type GuarantCountAggregateInputType = {
    id?: true
    sellerId?: true
    transferServiceId?: true
    storageId?: true
    _all?: true
  }

  export type GuarantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guarant to aggregate.
     */
    where?: GuarantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guarants to fetch.
     */
    orderBy?: GuarantOrderByWithRelationInput | GuarantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuarantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guarants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guarants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Guarants
    **/
    _count?: true | GuarantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GuarantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GuarantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuarantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuarantMaxAggregateInputType
  }

  export type GetGuarantAggregateType<T extends GuarantAggregateArgs> = {
        [P in keyof T & keyof AggregateGuarant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuarant[P]>
      : GetScalarType<T[P], AggregateGuarant[P]>
  }




  export type GuarantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuarantWhereInput
    orderBy?: GuarantOrderByWithAggregationInput | GuarantOrderByWithAggregationInput[]
    by: GuarantScalarFieldEnum[] | GuarantScalarFieldEnum
    having?: GuarantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuarantCountAggregateInputType | true
    _avg?: GuarantAvgAggregateInputType
    _sum?: GuarantSumAggregateInputType
    _min?: GuarantMinAggregateInputType
    _max?: GuarantMaxAggregateInputType
  }

  export type GuarantGroupByOutputType = {
    id: number
    sellerId: number
    transferServiceId: number | null
    storageId: number | null
    _count: GuarantCountAggregateOutputType | null
    _avg: GuarantAvgAggregateOutputType | null
    _sum: GuarantSumAggregateOutputType | null
    _min: GuarantMinAggregateOutputType | null
    _max: GuarantMaxAggregateOutputType | null
  }

  type GetGuarantGroupByPayload<T extends GuarantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuarantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuarantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuarantGroupByOutputType[P]>
            : GetScalarType<T[P], GuarantGroupByOutputType[P]>
        }
      >
    >


  export type GuarantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sellerId?: boolean
    transferServiceId?: boolean
    storageId?: boolean
    seller?: boolean | SellerDefaultArgs<ExtArgs>
    Buyer?: boolean | Guarant$BuyerArgs<ExtArgs>
    TransferService?: boolean | Guarant$TransferServiceArgs<ExtArgs>
    Storage?: boolean | Guarant$StorageArgs<ExtArgs>
    _count?: boolean | GuarantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["guarant"]>

  export type GuarantSelectScalar = {
    id?: boolean
    sellerId?: boolean
    transferServiceId?: boolean
    storageId?: boolean
  }

  export type GuarantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seller?: boolean | SellerDefaultArgs<ExtArgs>
    Buyer?: boolean | Guarant$BuyerArgs<ExtArgs>
    TransferService?: boolean | Guarant$TransferServiceArgs<ExtArgs>
    Storage?: boolean | Guarant$StorageArgs<ExtArgs>
    _count?: boolean | GuarantCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GuarantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Guarant"
    objects: {
      seller: Prisma.$SellerPayload<ExtArgs>
      Buyer: Prisma.$BuyerPayload<ExtArgs>[]
      TransferService: Prisma.$TransferServicePayload<ExtArgs> | null
      Storage: Prisma.$StoragePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sellerId: number
      transferServiceId: number | null
      storageId: number | null
    }, ExtArgs["result"]["guarant"]>
    composites: {}
  }


  type GuarantGetPayload<S extends boolean | null | undefined | GuarantDefaultArgs> = $Result.GetResult<Prisma.$GuarantPayload, S>

  type GuarantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GuarantFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: GuarantCountAggregateInputType | true
    }

  export interface GuarantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Guarant'], meta: { name: 'Guarant' } }
    /**
     * Find zero or one Guarant that matches the filter.
     * @param {GuarantFindUniqueArgs} args - Arguments to find a Guarant
     * @example
     * // Get one Guarant
     * const guarant = await prisma.guarant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GuarantFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GuarantFindUniqueArgs<ExtArgs>>
    ): Prisma__GuarantClient<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Guarant that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GuarantFindUniqueOrThrowArgs} args - Arguments to find a Guarant
     * @example
     * // Get one Guarant
     * const guarant = await prisma.guarant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GuarantFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GuarantFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GuarantClient<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Guarant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuarantFindFirstArgs} args - Arguments to find a Guarant
     * @example
     * // Get one Guarant
     * const guarant = await prisma.guarant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GuarantFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GuarantFindFirstArgs<ExtArgs>>
    ): Prisma__GuarantClient<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Guarant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuarantFindFirstOrThrowArgs} args - Arguments to find a Guarant
     * @example
     * // Get one Guarant
     * const guarant = await prisma.guarant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GuarantFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GuarantFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GuarantClient<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Guarants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuarantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guarants
     * const guarants = await prisma.guarant.findMany()
     * 
     * // Get first 10 Guarants
     * const guarants = await prisma.guarant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guarantWithIdOnly = await prisma.guarant.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GuarantFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuarantFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Guarant.
     * @param {GuarantCreateArgs} args - Arguments to create a Guarant.
     * @example
     * // Create one Guarant
     * const Guarant = await prisma.guarant.create({
     *   data: {
     *     // ... data to create a Guarant
     *   }
     * })
     * 
    **/
    create<T extends GuarantCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GuarantCreateArgs<ExtArgs>>
    ): Prisma__GuarantClient<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Guarants.
     *     @param {GuarantCreateManyArgs} args - Arguments to create many Guarants.
     *     @example
     *     // Create many Guarants
     *     const guarant = await prisma.guarant.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GuarantCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuarantCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Guarant.
     * @param {GuarantDeleteArgs} args - Arguments to delete one Guarant.
     * @example
     * // Delete one Guarant
     * const Guarant = await prisma.guarant.delete({
     *   where: {
     *     // ... filter to delete one Guarant
     *   }
     * })
     * 
    **/
    delete<T extends GuarantDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GuarantDeleteArgs<ExtArgs>>
    ): Prisma__GuarantClient<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Guarant.
     * @param {GuarantUpdateArgs} args - Arguments to update one Guarant.
     * @example
     * // Update one Guarant
     * const guarant = await prisma.guarant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GuarantUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GuarantUpdateArgs<ExtArgs>>
    ): Prisma__GuarantClient<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Guarants.
     * @param {GuarantDeleteManyArgs} args - Arguments to filter Guarants to delete.
     * @example
     * // Delete a few Guarants
     * const { count } = await prisma.guarant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GuarantDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuarantDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guarants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuarantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guarants
     * const guarant = await prisma.guarant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GuarantUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GuarantUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Guarant.
     * @param {GuarantUpsertArgs} args - Arguments to update or create a Guarant.
     * @example
     * // Update or create a Guarant
     * const guarant = await prisma.guarant.upsert({
     *   create: {
     *     // ... data to create a Guarant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guarant we want to update
     *   }
     * })
    **/
    upsert<T extends GuarantUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GuarantUpsertArgs<ExtArgs>>
    ): Prisma__GuarantClient<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Guarants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuarantCountArgs} args - Arguments to filter Guarants to count.
     * @example
     * // Count the number of Guarants
     * const count = await prisma.guarant.count({
     *   where: {
     *     // ... the filter for the Guarants we want to count
     *   }
     * })
    **/
    count<T extends GuarantCountArgs>(
      args?: Subset<T, GuarantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuarantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guarant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuarantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuarantAggregateArgs>(args: Subset<T, GuarantAggregateArgs>): Prisma.PrismaPromise<GetGuarantAggregateType<T>>

    /**
     * Group by Guarant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuarantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuarantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuarantGroupByArgs['orderBy'] }
        : { orderBy?: GuarantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuarantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuarantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Guarant model
   */
  readonly fields: GuarantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Guarant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuarantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    seller<T extends SellerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SellerDefaultArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Buyer<T extends Guarant$BuyerArgs<ExtArgs> = {}>(args?: Subset<T, Guarant$BuyerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'findMany'> | Null>;

    TransferService<T extends Guarant$TransferServiceArgs<ExtArgs> = {}>(args?: Subset<T, Guarant$TransferServiceArgs<ExtArgs>>): Prisma__TransferServiceClient<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Storage<T extends Guarant$StorageArgs<ExtArgs> = {}>(args?: Subset<T, Guarant$StorageArgs<ExtArgs>>): Prisma__StorageClient<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Guarant model
   */ 
  interface GuarantFieldRefs {
    readonly id: FieldRef<"Guarant", 'Int'>
    readonly sellerId: FieldRef<"Guarant", 'Int'>
    readonly transferServiceId: FieldRef<"Guarant", 'Int'>
    readonly storageId: FieldRef<"Guarant", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Guarant findUnique
   */
  export type GuarantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    /**
     * Filter, which Guarant to fetch.
     */
    where: GuarantWhereUniqueInput
  }


  /**
   * Guarant findUniqueOrThrow
   */
  export type GuarantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    /**
     * Filter, which Guarant to fetch.
     */
    where: GuarantWhereUniqueInput
  }


  /**
   * Guarant findFirst
   */
  export type GuarantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    /**
     * Filter, which Guarant to fetch.
     */
    where?: GuarantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guarants to fetch.
     */
    orderBy?: GuarantOrderByWithRelationInput | GuarantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guarants.
     */
    cursor?: GuarantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guarants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guarants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guarants.
     */
    distinct?: GuarantScalarFieldEnum | GuarantScalarFieldEnum[]
  }


  /**
   * Guarant findFirstOrThrow
   */
  export type GuarantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    /**
     * Filter, which Guarant to fetch.
     */
    where?: GuarantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guarants to fetch.
     */
    orderBy?: GuarantOrderByWithRelationInput | GuarantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guarants.
     */
    cursor?: GuarantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guarants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guarants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guarants.
     */
    distinct?: GuarantScalarFieldEnum | GuarantScalarFieldEnum[]
  }


  /**
   * Guarant findMany
   */
  export type GuarantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    /**
     * Filter, which Guarants to fetch.
     */
    where?: GuarantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guarants to fetch.
     */
    orderBy?: GuarantOrderByWithRelationInput | GuarantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Guarants.
     */
    cursor?: GuarantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guarants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guarants.
     */
    skip?: number
    distinct?: GuarantScalarFieldEnum | GuarantScalarFieldEnum[]
  }


  /**
   * Guarant create
   */
  export type GuarantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    /**
     * The data needed to create a Guarant.
     */
    data: XOR<GuarantCreateInput, GuarantUncheckedCreateInput>
  }


  /**
   * Guarant createMany
   */
  export type GuarantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Guarants.
     */
    data: GuarantCreateManyInput | GuarantCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Guarant update
   */
  export type GuarantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    /**
     * The data needed to update a Guarant.
     */
    data: XOR<GuarantUpdateInput, GuarantUncheckedUpdateInput>
    /**
     * Choose, which Guarant to update.
     */
    where: GuarantWhereUniqueInput
  }


  /**
   * Guarant updateMany
   */
  export type GuarantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Guarants.
     */
    data: XOR<GuarantUpdateManyMutationInput, GuarantUncheckedUpdateManyInput>
    /**
     * Filter which Guarants to update
     */
    where?: GuarantWhereInput
  }


  /**
   * Guarant upsert
   */
  export type GuarantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    /**
     * The filter to search for the Guarant to update in case it exists.
     */
    where: GuarantWhereUniqueInput
    /**
     * In case the Guarant found by the `where` argument doesn't exist, create a new Guarant with this data.
     */
    create: XOR<GuarantCreateInput, GuarantUncheckedCreateInput>
    /**
     * In case the Guarant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuarantUpdateInput, GuarantUncheckedUpdateInput>
  }


  /**
   * Guarant delete
   */
  export type GuarantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    /**
     * Filter which Guarant to delete.
     */
    where: GuarantWhereUniqueInput
  }


  /**
   * Guarant deleteMany
   */
  export type GuarantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guarants to delete
     */
    where?: GuarantWhereInput
  }


  /**
   * Guarant.Buyer
   */
  export type Guarant$BuyerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    where?: BuyerWhereInput
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    cursor?: BuyerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }


  /**
   * Guarant.TransferService
   */
  export type Guarant$TransferServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    where?: TransferServiceWhereInput
  }


  /**
   * Guarant.Storage
   */
  export type Guarant$StorageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    where?: StorageWhereInput
  }


  /**
   * Guarant without action
   */
  export type GuarantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
  }



  /**
   * Model TransferService
   */

  export type AggregateTransferService = {
    _count: TransferServiceCountAggregateOutputType | null
    _avg: TransferServiceAvgAggregateOutputType | null
    _sum: TransferServiceSumAggregateOutputType | null
    _min: TransferServiceMinAggregateOutputType | null
    _max: TransferServiceMaxAggregateOutputType | null
  }

  export type TransferServiceAvgAggregateOutputType = {
    id: number | null
  }

  export type TransferServiceSumAggregateOutputType = {
    id: number | null
  }

  export type TransferServiceMinAggregateOutputType = {
    id: number | null
  }

  export type TransferServiceMaxAggregateOutputType = {
    id: number | null
  }

  export type TransferServiceCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type TransferServiceAvgAggregateInputType = {
    id?: true
  }

  export type TransferServiceSumAggregateInputType = {
    id?: true
  }

  export type TransferServiceMinAggregateInputType = {
    id?: true
  }

  export type TransferServiceMaxAggregateInputType = {
    id?: true
  }

  export type TransferServiceCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type TransferServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransferService to aggregate.
     */
    where?: TransferServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransferServices to fetch.
     */
    orderBy?: TransferServiceOrderByWithRelationInput | TransferServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransferServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransferServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransferServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransferServices
    **/
    _count?: true | TransferServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransferServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransferServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransferServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransferServiceMaxAggregateInputType
  }

  export type GetTransferServiceAggregateType<T extends TransferServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateTransferService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransferService[P]>
      : GetScalarType<T[P], AggregateTransferService[P]>
  }




  export type TransferServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransferServiceWhereInput
    orderBy?: TransferServiceOrderByWithAggregationInput | TransferServiceOrderByWithAggregationInput[]
    by: TransferServiceScalarFieldEnum[] | TransferServiceScalarFieldEnum
    having?: TransferServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransferServiceCountAggregateInputType | true
    _avg?: TransferServiceAvgAggregateInputType
    _sum?: TransferServiceSumAggregateInputType
    _min?: TransferServiceMinAggregateInputType
    _max?: TransferServiceMaxAggregateInputType
  }

  export type TransferServiceGroupByOutputType = {
    id: number
    _count: TransferServiceCountAggregateOutputType | null
    _avg: TransferServiceAvgAggregateOutputType | null
    _sum: TransferServiceSumAggregateOutputType | null
    _min: TransferServiceMinAggregateOutputType | null
    _max: TransferServiceMaxAggregateOutputType | null
  }

  type GetTransferServiceGroupByPayload<T extends TransferServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransferServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransferServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransferServiceGroupByOutputType[P]>
            : GetScalarType<T[P], TransferServiceGroupByOutputType[P]>
        }
      >
    >


  export type TransferServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storages?: boolean | TransferService$storagesArgs<ExtArgs>
    departments?: boolean | TransferService$departmentsArgs<ExtArgs>
    guarants?: boolean | TransferService$guarantsArgs<ExtArgs>
    _count?: boolean | TransferServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transferService"]>

  export type TransferServiceSelectScalar = {
    id?: boolean
  }

  export type TransferServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    storages?: boolean | TransferService$storagesArgs<ExtArgs>
    departments?: boolean | TransferService$departmentsArgs<ExtArgs>
    guarants?: boolean | TransferService$guarantsArgs<ExtArgs>
    _count?: boolean | TransferServiceCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TransferServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TransferService"
    objects: {
      storages: Prisma.$StoragePayload<ExtArgs>[]
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
      guarants: Prisma.$GuarantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
    }, ExtArgs["result"]["transferService"]>
    composites: {}
  }


  type TransferServiceGetPayload<S extends boolean | null | undefined | TransferServiceDefaultArgs> = $Result.GetResult<Prisma.$TransferServicePayload, S>

  type TransferServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransferServiceFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TransferServiceCountAggregateInputType | true
    }

  export interface TransferServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransferService'], meta: { name: 'TransferService' } }
    /**
     * Find zero or one TransferService that matches the filter.
     * @param {TransferServiceFindUniqueArgs} args - Arguments to find a TransferService
     * @example
     * // Get one TransferService
     * const transferService = await prisma.transferService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransferServiceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TransferServiceFindUniqueArgs<ExtArgs>>
    ): Prisma__TransferServiceClient<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TransferService that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TransferServiceFindUniqueOrThrowArgs} args - Arguments to find a TransferService
     * @example
     * // Get one TransferService
     * const transferService = await prisma.transferService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransferServiceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransferServiceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransferServiceClient<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TransferService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferServiceFindFirstArgs} args - Arguments to find a TransferService
     * @example
     * // Get one TransferService
     * const transferService = await prisma.transferService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransferServiceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TransferServiceFindFirstArgs<ExtArgs>>
    ): Prisma__TransferServiceClient<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TransferService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferServiceFindFirstOrThrowArgs} args - Arguments to find a TransferService
     * @example
     * // Get one TransferService
     * const transferService = await prisma.transferService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransferServiceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransferServiceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransferServiceClient<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TransferServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferServiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransferServices
     * const transferServices = await prisma.transferService.findMany()
     * 
     * // Get first 10 TransferServices
     * const transferServices = await prisma.transferService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transferServiceWithIdOnly = await prisma.transferService.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransferServiceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransferServiceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TransferService.
     * @param {TransferServiceCreateArgs} args - Arguments to create a TransferService.
     * @example
     * // Create one TransferService
     * const TransferService = await prisma.transferService.create({
     *   data: {
     *     // ... data to create a TransferService
     *   }
     * })
     * 
    **/
    create<T extends TransferServiceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransferServiceCreateArgs<ExtArgs>>
    ): Prisma__TransferServiceClient<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TransferServices.
     *     @param {TransferServiceCreateManyArgs} args - Arguments to create many TransferServices.
     *     @example
     *     // Create many TransferServices
     *     const transferService = await prisma.transferService.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransferServiceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransferServiceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TransferService.
     * @param {TransferServiceDeleteArgs} args - Arguments to delete one TransferService.
     * @example
     * // Delete one TransferService
     * const TransferService = await prisma.transferService.delete({
     *   where: {
     *     // ... filter to delete one TransferService
     *   }
     * })
     * 
    **/
    delete<T extends TransferServiceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransferServiceDeleteArgs<ExtArgs>>
    ): Prisma__TransferServiceClient<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TransferService.
     * @param {TransferServiceUpdateArgs} args - Arguments to update one TransferService.
     * @example
     * // Update one TransferService
     * const transferService = await prisma.transferService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransferServiceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransferServiceUpdateArgs<ExtArgs>>
    ): Prisma__TransferServiceClient<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TransferServices.
     * @param {TransferServiceDeleteManyArgs} args - Arguments to filter TransferServices to delete.
     * @example
     * // Delete a few TransferServices
     * const { count } = await prisma.transferService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransferServiceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransferServiceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransferServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransferServices
     * const transferService = await prisma.transferService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransferServiceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransferServiceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TransferService.
     * @param {TransferServiceUpsertArgs} args - Arguments to update or create a TransferService.
     * @example
     * // Update or create a TransferService
     * const transferService = await prisma.transferService.upsert({
     *   create: {
     *     // ... data to create a TransferService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransferService we want to update
     *   }
     * })
    **/
    upsert<T extends TransferServiceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransferServiceUpsertArgs<ExtArgs>>
    ): Prisma__TransferServiceClient<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TransferServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferServiceCountArgs} args - Arguments to filter TransferServices to count.
     * @example
     * // Count the number of TransferServices
     * const count = await prisma.transferService.count({
     *   where: {
     *     // ... the filter for the TransferServices we want to count
     *   }
     * })
    **/
    count<T extends TransferServiceCountArgs>(
      args?: Subset<T, TransferServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransferServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransferService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransferServiceAggregateArgs>(args: Subset<T, TransferServiceAggregateArgs>): Prisma.PrismaPromise<GetTransferServiceAggregateType<T>>

    /**
     * Group by TransferService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransferServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransferServiceGroupByArgs['orderBy'] }
        : { orderBy?: TransferServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransferServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransferServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransferService model
   */
  readonly fields: TransferServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransferService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransferServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    storages<T extends TransferService$storagesArgs<ExtArgs> = {}>(args?: Subset<T, TransferService$storagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'findMany'> | Null>;

    departments<T extends TransferService$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, TransferService$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    guarants<T extends TransferService$guarantsArgs<ExtArgs> = {}>(args?: Subset<T, TransferService$guarantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TransferService model
   */ 
  interface TransferServiceFieldRefs {
    readonly id: FieldRef<"TransferService", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * TransferService findUnique
   */
  export type TransferServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    /**
     * Filter, which TransferService to fetch.
     */
    where: TransferServiceWhereUniqueInput
  }


  /**
   * TransferService findUniqueOrThrow
   */
  export type TransferServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    /**
     * Filter, which TransferService to fetch.
     */
    where: TransferServiceWhereUniqueInput
  }


  /**
   * TransferService findFirst
   */
  export type TransferServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    /**
     * Filter, which TransferService to fetch.
     */
    where?: TransferServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransferServices to fetch.
     */
    orderBy?: TransferServiceOrderByWithRelationInput | TransferServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransferServices.
     */
    cursor?: TransferServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransferServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransferServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransferServices.
     */
    distinct?: TransferServiceScalarFieldEnum | TransferServiceScalarFieldEnum[]
  }


  /**
   * TransferService findFirstOrThrow
   */
  export type TransferServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    /**
     * Filter, which TransferService to fetch.
     */
    where?: TransferServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransferServices to fetch.
     */
    orderBy?: TransferServiceOrderByWithRelationInput | TransferServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransferServices.
     */
    cursor?: TransferServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransferServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransferServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransferServices.
     */
    distinct?: TransferServiceScalarFieldEnum | TransferServiceScalarFieldEnum[]
  }


  /**
   * TransferService findMany
   */
  export type TransferServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    /**
     * Filter, which TransferServices to fetch.
     */
    where?: TransferServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransferServices to fetch.
     */
    orderBy?: TransferServiceOrderByWithRelationInput | TransferServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransferServices.
     */
    cursor?: TransferServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransferServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransferServices.
     */
    skip?: number
    distinct?: TransferServiceScalarFieldEnum | TransferServiceScalarFieldEnum[]
  }


  /**
   * TransferService create
   */
  export type TransferServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a TransferService.
     */
    data?: XOR<TransferServiceCreateInput, TransferServiceUncheckedCreateInput>
  }


  /**
   * TransferService createMany
   */
  export type TransferServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransferServices.
     */
    data: TransferServiceCreateManyInput | TransferServiceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * TransferService update
   */
  export type TransferServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a TransferService.
     */
    data: XOR<TransferServiceUpdateInput, TransferServiceUncheckedUpdateInput>
    /**
     * Choose, which TransferService to update.
     */
    where: TransferServiceWhereUniqueInput
  }


  /**
   * TransferService updateMany
   */
  export type TransferServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransferServices.
     */
    data: XOR<TransferServiceUpdateManyMutationInput, TransferServiceUncheckedUpdateManyInput>
    /**
     * Filter which TransferServices to update
     */
    where?: TransferServiceWhereInput
  }


  /**
   * TransferService upsert
   */
  export type TransferServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the TransferService to update in case it exists.
     */
    where: TransferServiceWhereUniqueInput
    /**
     * In case the TransferService found by the `where` argument doesn't exist, create a new TransferService with this data.
     */
    create: XOR<TransferServiceCreateInput, TransferServiceUncheckedCreateInput>
    /**
     * In case the TransferService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransferServiceUpdateInput, TransferServiceUncheckedUpdateInput>
  }


  /**
   * TransferService delete
   */
  export type TransferServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    /**
     * Filter which TransferService to delete.
     */
    where: TransferServiceWhereUniqueInput
  }


  /**
   * TransferService deleteMany
   */
  export type TransferServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransferServices to delete
     */
    where?: TransferServiceWhereInput
  }


  /**
   * TransferService.storages
   */
  export type TransferService$storagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    where?: StorageWhereInput
    orderBy?: StorageOrderByWithRelationInput | StorageOrderByWithRelationInput[]
    cursor?: StorageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StorageScalarFieldEnum | StorageScalarFieldEnum[]
  }


  /**
   * TransferService.departments
   */
  export type TransferService$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * TransferService.guarants
   */
  export type TransferService$guarantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    where?: GuarantWhereInput
    orderBy?: GuarantOrderByWithRelationInput | GuarantOrderByWithRelationInput[]
    cursor?: GuarantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuarantScalarFieldEnum | GuarantScalarFieldEnum[]
  }


  /**
   * TransferService without action
   */
  export type TransferServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
  }



  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number | null
    transferServiceId: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    id: number | null
    transferServiceId: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: number | null
    transferServiceId: number | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number | null
    transferServiceId: number | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    transferServiceId: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
    transferServiceId?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
    transferServiceId?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    transferServiceId?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    transferServiceId?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    transferServiceId?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: number
    transferServiceId: number | null
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transferServiceId?: boolean
    TransferService?: boolean | Department$TransferServiceArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    transferServiceId?: boolean
  }

  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TransferService?: boolean | Department$TransferServiceArgs<ExtArgs>
  }


  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      TransferService: Prisma.$TransferServicePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      transferServiceId: number | null
    }, ExtArgs["result"]["department"]>
    composites: {}
  }


  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DepartmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DepartmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DepartmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
    **/
    create<T extends DepartmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Departments.
     *     @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     *     @example
     *     // Create many Departments
     *     const department = await prisma.department.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DepartmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
    **/
    delete<T extends DepartmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DepartmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DepartmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DepartmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
    **/
    upsert<T extends DepartmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    TransferService<T extends Department$TransferServiceArgs<ExtArgs> = {}>(args?: Subset<T, Department$TransferServiceArgs<ExtArgs>>): Prisma__TransferServiceClient<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'Int'>
    readonly transferServiceId: FieldRef<"Department", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data?: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }


  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }


  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }


  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }


  /**
   * Department.TransferService
   */
  export type Department$TransferServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    where?: TransferServiceWhereInput
  }


  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
  }



  /**
   * Model Storage
   */

  export type AggregateStorage = {
    _count: StorageCountAggregateOutputType | null
    _avg: StorageAvgAggregateOutputType | null
    _sum: StorageSumAggregateOutputType | null
    _min: StorageMinAggregateOutputType | null
    _max: StorageMaxAggregateOutputType | null
  }

  export type StorageAvgAggregateOutputType = {
    id: number | null
    transferServiceId: number | null
  }

  export type StorageSumAggregateOutputType = {
    id: number | null
    transferServiceId: number | null
  }

  export type StorageMinAggregateOutputType = {
    id: number | null
    transferServiceId: number | null
  }

  export type StorageMaxAggregateOutputType = {
    id: number | null
    transferServiceId: number | null
  }

  export type StorageCountAggregateOutputType = {
    id: number
    transferServiceId: number
    _all: number
  }


  export type StorageAvgAggregateInputType = {
    id?: true
    transferServiceId?: true
  }

  export type StorageSumAggregateInputType = {
    id?: true
    transferServiceId?: true
  }

  export type StorageMinAggregateInputType = {
    id?: true
    transferServiceId?: true
  }

  export type StorageMaxAggregateInputType = {
    id?: true
    transferServiceId?: true
  }

  export type StorageCountAggregateInputType = {
    id?: true
    transferServiceId?: true
    _all?: true
  }

  export type StorageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Storage to aggregate.
     */
    where?: StorageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Storages to fetch.
     */
    orderBy?: StorageOrderByWithRelationInput | StorageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StorageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Storages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Storages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Storages
    **/
    _count?: true | StorageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StorageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StorageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StorageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StorageMaxAggregateInputType
  }

  export type GetStorageAggregateType<T extends StorageAggregateArgs> = {
        [P in keyof T & keyof AggregateStorage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStorage[P]>
      : GetScalarType<T[P], AggregateStorage[P]>
  }




  export type StorageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StorageWhereInput
    orderBy?: StorageOrderByWithAggregationInput | StorageOrderByWithAggregationInput[]
    by: StorageScalarFieldEnum[] | StorageScalarFieldEnum
    having?: StorageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StorageCountAggregateInputType | true
    _avg?: StorageAvgAggregateInputType
    _sum?: StorageSumAggregateInputType
    _min?: StorageMinAggregateInputType
    _max?: StorageMaxAggregateInputType
  }

  export type StorageGroupByOutputType = {
    id: number
    transferServiceId: number | null
    _count: StorageCountAggregateOutputType | null
    _avg: StorageAvgAggregateOutputType | null
    _sum: StorageSumAggregateOutputType | null
    _min: StorageMinAggregateOutputType | null
    _max: StorageMaxAggregateOutputType | null
  }

  type GetStorageGroupByPayload<T extends StorageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StorageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StorageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StorageGroupByOutputType[P]>
            : GetScalarType<T[P], StorageGroupByOutputType[P]>
        }
      >
    >


  export type StorageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transferServiceId?: boolean
    buyers?: boolean | Storage$buyersArgs<ExtArgs>
    sellers?: boolean | Storage$sellersArgs<ExtArgs>
    guarants?: boolean | Storage$guarantsArgs<ExtArgs>
    TransferService?: boolean | Storage$TransferServiceArgs<ExtArgs>
    _count?: boolean | StorageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storage"]>

  export type StorageSelectScalar = {
    id?: boolean
    transferServiceId?: boolean
  }

  export type StorageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyers?: boolean | Storage$buyersArgs<ExtArgs>
    sellers?: boolean | Storage$sellersArgs<ExtArgs>
    guarants?: boolean | Storage$guarantsArgs<ExtArgs>
    TransferService?: boolean | Storage$TransferServiceArgs<ExtArgs>
    _count?: boolean | StorageCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StoragePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Storage"
    objects: {
      buyers: Prisma.$BuyerPayload<ExtArgs>[]
      sellers: Prisma.$SellerPayload<ExtArgs>[]
      guarants: Prisma.$GuarantPayload<ExtArgs>[]
      TransferService: Prisma.$TransferServicePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      transferServiceId: number | null
    }, ExtArgs["result"]["storage"]>
    composites: {}
  }


  type StorageGetPayload<S extends boolean | null | undefined | StorageDefaultArgs> = $Result.GetResult<Prisma.$StoragePayload, S>

  type StorageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StorageFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StorageCountAggregateInputType | true
    }

  export interface StorageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Storage'], meta: { name: 'Storage' } }
    /**
     * Find zero or one Storage that matches the filter.
     * @param {StorageFindUniqueArgs} args - Arguments to find a Storage
     * @example
     * // Get one Storage
     * const storage = await prisma.storage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StorageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StorageFindUniqueArgs<ExtArgs>>
    ): Prisma__StorageClient<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Storage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StorageFindUniqueOrThrowArgs} args - Arguments to find a Storage
     * @example
     * // Get one Storage
     * const storage = await prisma.storage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StorageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StorageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StorageClient<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Storage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageFindFirstArgs} args - Arguments to find a Storage
     * @example
     * // Get one Storage
     * const storage = await prisma.storage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StorageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StorageFindFirstArgs<ExtArgs>>
    ): Prisma__StorageClient<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Storage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageFindFirstOrThrowArgs} args - Arguments to find a Storage
     * @example
     * // Get one Storage
     * const storage = await prisma.storage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StorageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StorageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StorageClient<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Storages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Storages
     * const storages = await prisma.storage.findMany()
     * 
     * // Get first 10 Storages
     * const storages = await prisma.storage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storageWithIdOnly = await prisma.storage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StorageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StorageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Storage.
     * @param {StorageCreateArgs} args - Arguments to create a Storage.
     * @example
     * // Create one Storage
     * const Storage = await prisma.storage.create({
     *   data: {
     *     // ... data to create a Storage
     *   }
     * })
     * 
    **/
    create<T extends StorageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StorageCreateArgs<ExtArgs>>
    ): Prisma__StorageClient<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Storages.
     *     @param {StorageCreateManyArgs} args - Arguments to create many Storages.
     *     @example
     *     // Create many Storages
     *     const storage = await prisma.storage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StorageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StorageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Storage.
     * @param {StorageDeleteArgs} args - Arguments to delete one Storage.
     * @example
     * // Delete one Storage
     * const Storage = await prisma.storage.delete({
     *   where: {
     *     // ... filter to delete one Storage
     *   }
     * })
     * 
    **/
    delete<T extends StorageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StorageDeleteArgs<ExtArgs>>
    ): Prisma__StorageClient<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Storage.
     * @param {StorageUpdateArgs} args - Arguments to update one Storage.
     * @example
     * // Update one Storage
     * const storage = await prisma.storage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StorageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StorageUpdateArgs<ExtArgs>>
    ): Prisma__StorageClient<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Storages.
     * @param {StorageDeleteManyArgs} args - Arguments to filter Storages to delete.
     * @example
     * // Delete a few Storages
     * const { count } = await prisma.storage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StorageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StorageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Storages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Storages
     * const storage = await prisma.storage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StorageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StorageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Storage.
     * @param {StorageUpsertArgs} args - Arguments to update or create a Storage.
     * @example
     * // Update or create a Storage
     * const storage = await prisma.storage.upsert({
     *   create: {
     *     // ... data to create a Storage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Storage we want to update
     *   }
     * })
    **/
    upsert<T extends StorageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StorageUpsertArgs<ExtArgs>>
    ): Prisma__StorageClient<$Result.GetResult<Prisma.$StoragePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Storages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageCountArgs} args - Arguments to filter Storages to count.
     * @example
     * // Count the number of Storages
     * const count = await prisma.storage.count({
     *   where: {
     *     // ... the filter for the Storages we want to count
     *   }
     * })
    **/
    count<T extends StorageCountArgs>(
      args?: Subset<T, StorageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StorageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Storage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StorageAggregateArgs>(args: Subset<T, StorageAggregateArgs>): Prisma.PrismaPromise<GetStorageAggregateType<T>>

    /**
     * Group by Storage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StorageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StorageGroupByArgs['orderBy'] }
        : { orderBy?: StorageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StorageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStorageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Storage model
   */
  readonly fields: StorageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Storage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StorageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    buyers<T extends Storage$buyersArgs<ExtArgs> = {}>(args?: Subset<T, Storage$buyersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, 'findMany'> | Null>;

    sellers<T extends Storage$sellersArgs<ExtArgs> = {}>(args?: Subset<T, Storage$sellersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, 'findMany'> | Null>;

    guarants<T extends Storage$guarantsArgs<ExtArgs> = {}>(args?: Subset<T, Storage$guarantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuarantPayload<ExtArgs>, T, 'findMany'> | Null>;

    TransferService<T extends Storage$TransferServiceArgs<ExtArgs> = {}>(args?: Subset<T, Storage$TransferServiceArgs<ExtArgs>>): Prisma__TransferServiceClient<$Result.GetResult<Prisma.$TransferServicePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Storage model
   */ 
  interface StorageFieldRefs {
    readonly id: FieldRef<"Storage", 'Int'>
    readonly transferServiceId: FieldRef<"Storage", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Storage findUnique
   */
  export type StorageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    /**
     * Filter, which Storage to fetch.
     */
    where: StorageWhereUniqueInput
  }


  /**
   * Storage findUniqueOrThrow
   */
  export type StorageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    /**
     * Filter, which Storage to fetch.
     */
    where: StorageWhereUniqueInput
  }


  /**
   * Storage findFirst
   */
  export type StorageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    /**
     * Filter, which Storage to fetch.
     */
    where?: StorageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Storages to fetch.
     */
    orderBy?: StorageOrderByWithRelationInput | StorageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Storages.
     */
    cursor?: StorageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Storages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Storages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Storages.
     */
    distinct?: StorageScalarFieldEnum | StorageScalarFieldEnum[]
  }


  /**
   * Storage findFirstOrThrow
   */
  export type StorageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    /**
     * Filter, which Storage to fetch.
     */
    where?: StorageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Storages to fetch.
     */
    orderBy?: StorageOrderByWithRelationInput | StorageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Storages.
     */
    cursor?: StorageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Storages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Storages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Storages.
     */
    distinct?: StorageScalarFieldEnum | StorageScalarFieldEnum[]
  }


  /**
   * Storage findMany
   */
  export type StorageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    /**
     * Filter, which Storages to fetch.
     */
    where?: StorageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Storages to fetch.
     */
    orderBy?: StorageOrderByWithRelationInput | StorageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Storages.
     */
    cursor?: StorageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Storages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Storages.
     */
    skip?: number
    distinct?: StorageScalarFieldEnum | StorageScalarFieldEnum[]
  }


  /**
   * Storage create
   */
  export type StorageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    /**
     * The data needed to create a Storage.
     */
    data?: XOR<StorageCreateInput, StorageUncheckedCreateInput>
  }


  /**
   * Storage createMany
   */
  export type StorageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Storages.
     */
    data: StorageCreateManyInput | StorageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Storage update
   */
  export type StorageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    /**
     * The data needed to update a Storage.
     */
    data: XOR<StorageUpdateInput, StorageUncheckedUpdateInput>
    /**
     * Choose, which Storage to update.
     */
    where: StorageWhereUniqueInput
  }


  /**
   * Storage updateMany
   */
  export type StorageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Storages.
     */
    data: XOR<StorageUpdateManyMutationInput, StorageUncheckedUpdateManyInput>
    /**
     * Filter which Storages to update
     */
    where?: StorageWhereInput
  }


  /**
   * Storage upsert
   */
  export type StorageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    /**
     * The filter to search for the Storage to update in case it exists.
     */
    where: StorageWhereUniqueInput
    /**
     * In case the Storage found by the `where` argument doesn't exist, create a new Storage with this data.
     */
    create: XOR<StorageCreateInput, StorageUncheckedCreateInput>
    /**
     * In case the Storage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StorageUpdateInput, StorageUncheckedUpdateInput>
  }


  /**
   * Storage delete
   */
  export type StorageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
    /**
     * Filter which Storage to delete.
     */
    where: StorageWhereUniqueInput
  }


  /**
   * Storage deleteMany
   */
  export type StorageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Storages to delete
     */
    where?: StorageWhereInput
  }


  /**
   * Storage.buyers
   */
  export type Storage$buyersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyerInclude<ExtArgs> | null
    where?: BuyerWhereInput
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    cursor?: BuyerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }


  /**
   * Storage.sellers
   */
  export type Storage$sellersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellerInclude<ExtArgs> | null
    where?: SellerWhereInput
    orderBy?: SellerOrderByWithRelationInput | SellerOrderByWithRelationInput[]
    cursor?: SellerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * Storage.guarants
   */
  export type Storage$guarantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guarant
     */
    select?: GuarantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuarantInclude<ExtArgs> | null
    where?: GuarantWhereInput
    orderBy?: GuarantOrderByWithRelationInput | GuarantOrderByWithRelationInput[]
    cursor?: GuarantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuarantScalarFieldEnum | GuarantScalarFieldEnum[]
  }


  /**
   * Storage.TransferService
   */
  export type Storage$TransferServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransferService
     */
    select?: TransferServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransferServiceInclude<ExtArgs> | null
    where?: TransferServiceWhereInput
  }


  /**
   * Storage without action
   */
  export type StorageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Storage
     */
    select?: StorageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StorageInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SellerScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    first_name: 'first_name',
    middle_name: 'middle_name',
    last_name: 'last_name',
    birth_date: 'birth_date',
    bio: 'bio',
    last_time_online: 'last_time_online',
    sold_items: 'sold_items',
    joined: 'joined',
    total_items_placed: 'total_items_placed',
    items_placed_now: 'items_placed_now',
    categoryId: 'categoryId',
    storageId: 'storageId'
  };

  export type SellerScalarFieldEnum = (typeof SellerScalarFieldEnum)[keyof typeof SellerScalarFieldEnum]


  export const BuyerScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    first_name: 'first_name',
    middle_name: 'middle_name',
    last_name: 'last_name',
    birth_date: 'birth_date',
    bio: 'bio',
    last_time_online: 'last_time_online',
    bought_items: 'bought_items',
    joined: 'joined',
    sellerId: 'sellerId',
    storageId: 'storageId',
    guarantId: 'guarantId'
  };

  export type BuyerScalarFieldEnum = (typeof BuyerScalarFieldEnum)[keyof typeof BuyerScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    placed_items_number: 'placed_items_number',
    description: 'description'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    name: 'name',
    createdAt: 'createdAt',
    placedAt: 'placedAt',
    description: 'description'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    body: 'body',
    buyerId: 'buyerId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const GuarantScalarFieldEnum: {
    id: 'id',
    sellerId: 'sellerId',
    transferServiceId: 'transferServiceId',
    storageId: 'storageId'
  };

  export type GuarantScalarFieldEnum = (typeof GuarantScalarFieldEnum)[keyof typeof GuarantScalarFieldEnum]


  export const TransferServiceScalarFieldEnum: {
    id: 'id'
  };

  export type TransferServiceScalarFieldEnum = (typeof TransferServiceScalarFieldEnum)[keyof typeof TransferServiceScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    transferServiceId: 'transferServiceId'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const StorageScalarFieldEnum: {
    id: 'id',
    transferServiceId: 'transferServiceId'
  };

  export type StorageScalarFieldEnum = (typeof StorageScalarFieldEnum)[keyof typeof StorageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type SellerWhereInput = {
    AND?: SellerWhereInput | SellerWhereInput[]
    OR?: SellerWhereInput[]
    NOT?: SellerWhereInput | SellerWhereInput[]
    id?: IntFilter<"Seller"> | number
    createdAt?: DateTimeFilter<"Seller"> | Date | string
    first_name?: StringFilter<"Seller"> | string
    middle_name?: StringFilter<"Seller"> | string
    last_name?: StringFilter<"Seller"> | string
    birth_date?: DateTimeFilter<"Seller"> | Date | string
    bio?: StringNullableFilter<"Seller"> | string | null
    last_time_online?: DateTimeFilter<"Seller"> | Date | string
    sold_items?: IntFilter<"Seller"> | number
    joined?: DateTimeFilter<"Seller"> | Date | string
    total_items_placed?: IntFilter<"Seller"> | number
    items_placed_now?: IntFilter<"Seller"> | number
    categoryId?: IntNullableFilter<"Seller"> | number | null
    storageId?: IntNullableFilter<"Seller"> | number | null
    most_frequent_buyers?: BuyerListRelationFilter
    favourite_category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    Storage?: XOR<StorageNullableRelationFilter, StorageWhereInput> | null
    Guarant?: GuarantListRelationFilter
  }

  export type SellerOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    birth_date?: SortOrder
    bio?: SortOrderInput | SortOrder
    last_time_online?: SortOrder
    sold_items?: SortOrder
    joined?: SortOrder
    total_items_placed?: SortOrder
    items_placed_now?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    storageId?: SortOrderInput | SortOrder
    most_frequent_buyers?: BuyerOrderByRelationAggregateInput
    favourite_category?: CategoryOrderByWithRelationInput
    Storage?: StorageOrderByWithRelationInput
    Guarant?: GuarantOrderByRelationAggregateInput
  }

  export type SellerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SellerWhereInput | SellerWhereInput[]
    OR?: SellerWhereInput[]
    NOT?: SellerWhereInput | SellerWhereInput[]
    createdAt?: DateTimeFilter<"Seller"> | Date | string
    first_name?: StringFilter<"Seller"> | string
    middle_name?: StringFilter<"Seller"> | string
    last_name?: StringFilter<"Seller"> | string
    birth_date?: DateTimeFilter<"Seller"> | Date | string
    bio?: StringNullableFilter<"Seller"> | string | null
    last_time_online?: DateTimeFilter<"Seller"> | Date | string
    sold_items?: IntFilter<"Seller"> | number
    joined?: DateTimeFilter<"Seller"> | Date | string
    total_items_placed?: IntFilter<"Seller"> | number
    items_placed_now?: IntFilter<"Seller"> | number
    categoryId?: IntNullableFilter<"Seller"> | number | null
    storageId?: IntNullableFilter<"Seller"> | number | null
    most_frequent_buyers?: BuyerListRelationFilter
    favourite_category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    Storage?: XOR<StorageNullableRelationFilter, StorageWhereInput> | null
    Guarant?: GuarantListRelationFilter
  }, "id">

  export type SellerOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    birth_date?: SortOrder
    bio?: SortOrderInput | SortOrder
    last_time_online?: SortOrder
    sold_items?: SortOrder
    joined?: SortOrder
    total_items_placed?: SortOrder
    items_placed_now?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    storageId?: SortOrderInput | SortOrder
    _count?: SellerCountOrderByAggregateInput
    _avg?: SellerAvgOrderByAggregateInput
    _max?: SellerMaxOrderByAggregateInput
    _min?: SellerMinOrderByAggregateInput
    _sum?: SellerSumOrderByAggregateInput
  }

  export type SellerScalarWhereWithAggregatesInput = {
    AND?: SellerScalarWhereWithAggregatesInput | SellerScalarWhereWithAggregatesInput[]
    OR?: SellerScalarWhereWithAggregatesInput[]
    NOT?: SellerScalarWhereWithAggregatesInput | SellerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Seller"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Seller"> | Date | string
    first_name?: StringWithAggregatesFilter<"Seller"> | string
    middle_name?: StringWithAggregatesFilter<"Seller"> | string
    last_name?: StringWithAggregatesFilter<"Seller"> | string
    birth_date?: DateTimeWithAggregatesFilter<"Seller"> | Date | string
    bio?: StringNullableWithAggregatesFilter<"Seller"> | string | null
    last_time_online?: DateTimeWithAggregatesFilter<"Seller"> | Date | string
    sold_items?: IntWithAggregatesFilter<"Seller"> | number
    joined?: DateTimeWithAggregatesFilter<"Seller"> | Date | string
    total_items_placed?: IntWithAggregatesFilter<"Seller"> | number
    items_placed_now?: IntWithAggregatesFilter<"Seller"> | number
    categoryId?: IntNullableWithAggregatesFilter<"Seller"> | number | null
    storageId?: IntNullableWithAggregatesFilter<"Seller"> | number | null
  }

  export type BuyerWhereInput = {
    AND?: BuyerWhereInput | BuyerWhereInput[]
    OR?: BuyerWhereInput[]
    NOT?: BuyerWhereInput | BuyerWhereInput[]
    id?: IntFilter<"Buyer"> | number
    createdAt?: DateTimeFilter<"Buyer"> | Date | string
    first_name?: StringFilter<"Buyer"> | string
    middle_name?: StringFilter<"Buyer"> | string
    last_name?: StringFilter<"Buyer"> | string
    birth_date?: DateTimeFilter<"Buyer"> | Date | string
    bio?: StringNullableFilter<"Buyer"> | string | null
    last_time_online?: DateTimeFilter<"Buyer"> | Date | string
    bought_items?: IntFilter<"Buyer"> | number
    joined?: DateTimeFilter<"Buyer"> | Date | string
    sellerId?: IntNullableFilter<"Buyer"> | number | null
    storageId?: IntNullableFilter<"Buyer"> | number | null
    guarantId?: IntFilter<"Buyer"> | number
    Seller?: XOR<SellerNullableRelationFilter, SellerWhereInput> | null
    Storage?: XOR<StorageNullableRelationFilter, StorageWhereInput> | null
    guarant?: XOR<GuarantRelationFilter, GuarantWhereInput>
    Comment?: CommentListRelationFilter
  }

  export type BuyerOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    birth_date?: SortOrder
    bio?: SortOrderInput | SortOrder
    last_time_online?: SortOrder
    bought_items?: SortOrder
    joined?: SortOrder
    sellerId?: SortOrderInput | SortOrder
    storageId?: SortOrderInput | SortOrder
    guarantId?: SortOrder
    Seller?: SellerOrderByWithRelationInput
    Storage?: StorageOrderByWithRelationInput
    guarant?: GuarantOrderByWithRelationInput
    Comment?: CommentOrderByRelationAggregateInput
  }

  export type BuyerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BuyerWhereInput | BuyerWhereInput[]
    OR?: BuyerWhereInput[]
    NOT?: BuyerWhereInput | BuyerWhereInput[]
    createdAt?: DateTimeFilter<"Buyer"> | Date | string
    first_name?: StringFilter<"Buyer"> | string
    middle_name?: StringFilter<"Buyer"> | string
    last_name?: StringFilter<"Buyer"> | string
    birth_date?: DateTimeFilter<"Buyer"> | Date | string
    bio?: StringNullableFilter<"Buyer"> | string | null
    last_time_online?: DateTimeFilter<"Buyer"> | Date | string
    bought_items?: IntFilter<"Buyer"> | number
    joined?: DateTimeFilter<"Buyer"> | Date | string
    sellerId?: IntNullableFilter<"Buyer"> | number | null
    storageId?: IntNullableFilter<"Buyer"> | number | null
    guarantId?: IntFilter<"Buyer"> | number
    Seller?: XOR<SellerNullableRelationFilter, SellerWhereInput> | null
    Storage?: XOR<StorageNullableRelationFilter, StorageWhereInput> | null
    guarant?: XOR<GuarantRelationFilter, GuarantWhereInput>
    Comment?: CommentListRelationFilter
  }, "id">

  export type BuyerOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    birth_date?: SortOrder
    bio?: SortOrderInput | SortOrder
    last_time_online?: SortOrder
    bought_items?: SortOrder
    joined?: SortOrder
    sellerId?: SortOrderInput | SortOrder
    storageId?: SortOrderInput | SortOrder
    guarantId?: SortOrder
    _count?: BuyerCountOrderByAggregateInput
    _avg?: BuyerAvgOrderByAggregateInput
    _max?: BuyerMaxOrderByAggregateInput
    _min?: BuyerMinOrderByAggregateInput
    _sum?: BuyerSumOrderByAggregateInput
  }

  export type BuyerScalarWhereWithAggregatesInput = {
    AND?: BuyerScalarWhereWithAggregatesInput | BuyerScalarWhereWithAggregatesInput[]
    OR?: BuyerScalarWhereWithAggregatesInput[]
    NOT?: BuyerScalarWhereWithAggregatesInput | BuyerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Buyer"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Buyer"> | Date | string
    first_name?: StringWithAggregatesFilter<"Buyer"> | string
    middle_name?: StringWithAggregatesFilter<"Buyer"> | string
    last_name?: StringWithAggregatesFilter<"Buyer"> | string
    birth_date?: DateTimeWithAggregatesFilter<"Buyer"> | Date | string
    bio?: StringNullableWithAggregatesFilter<"Buyer"> | string | null
    last_time_online?: DateTimeWithAggregatesFilter<"Buyer"> | Date | string
    bought_items?: IntWithAggregatesFilter<"Buyer"> | number
    joined?: DateTimeWithAggregatesFilter<"Buyer"> | Date | string
    sellerId?: IntNullableWithAggregatesFilter<"Buyer"> | number | null
    storageId?: IntNullableWithAggregatesFilter<"Buyer"> | number | null
    guarantId?: IntWithAggregatesFilter<"Buyer"> | number
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    placed_items_number?: IntFilter<"Category"> | number
    description?: StringFilter<"Category"> | string
    Seller?: SellerListRelationFilter
    placed_items?: ItemListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    placed_items_number?: SortOrder
    description?: SortOrder
    Seller?: SellerOrderByRelationAggregateInput
    placed_items?: ItemOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    placed_items_number?: IntFilter<"Category"> | number
    description?: StringFilter<"Category"> | string
    Seller?: SellerListRelationFilter
    placed_items?: ItemListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    placed_items_number?: SortOrder
    description?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    placed_items_number?: IntWithAggregatesFilter<"Category"> | number
    description?: StringWithAggregatesFilter<"Category"> | string
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    id?: IntFilter<"Item"> | number
    categoryId?: IntNullableFilter<"Item"> | number | null
    name?: StringFilter<"Item"> | string
    createdAt?: DateTimeFilter<"Item"> | Date | string
    placedAt?: DateTimeNullableFilter<"Item"> | Date | string | null
    description?: StringFilter<"Item"> | string
    Category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    placedAt?: SortOrderInput | SortOrder
    description?: SortOrder
    Category?: CategoryOrderByWithRelationInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    categoryId?: IntNullableFilter<"Item"> | number | null
    name?: StringFilter<"Item"> | string
    createdAt?: DateTimeFilter<"Item"> | Date | string
    placedAt?: DateTimeNullableFilter<"Item"> | Date | string | null
    description?: StringFilter<"Item"> | string
    Category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
  }, "id">

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    placedAt?: SortOrderInput | SortOrder
    description?: SortOrder
    _count?: ItemCountOrderByAggregateInput
    _avg?: ItemAvgOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
    _sum?: ItemSumOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Item"> | number
    categoryId?: IntNullableWithAggregatesFilter<"Item"> | number | null
    name?: StringWithAggregatesFilter<"Item"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Item"> | Date | string
    placedAt?: DateTimeNullableWithAggregatesFilter<"Item"> | Date | string | null
    description?: StringWithAggregatesFilter<"Item"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    title?: StringFilter<"Comment"> | string
    body?: StringFilter<"Comment"> | string
    buyerId?: IntFilter<"Comment"> | number
    buyer?: XOR<BuyerRelationFilter, BuyerWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    buyerId?: SortOrder
    buyer?: BuyerOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    title?: StringFilter<"Comment"> | string
    body?: StringFilter<"Comment"> | string
    buyerId?: IntFilter<"Comment"> | number
    buyer?: XOR<BuyerRelationFilter, BuyerWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    buyerId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    title?: StringWithAggregatesFilter<"Comment"> | string
    body?: StringWithAggregatesFilter<"Comment"> | string
    buyerId?: IntWithAggregatesFilter<"Comment"> | number
  }

  export type GuarantWhereInput = {
    AND?: GuarantWhereInput | GuarantWhereInput[]
    OR?: GuarantWhereInput[]
    NOT?: GuarantWhereInput | GuarantWhereInput[]
    id?: IntFilter<"Guarant"> | number
    sellerId?: IntFilter<"Guarant"> | number
    transferServiceId?: IntNullableFilter<"Guarant"> | number | null
    storageId?: IntNullableFilter<"Guarant"> | number | null
    seller?: XOR<SellerRelationFilter, SellerWhereInput>
    Buyer?: BuyerListRelationFilter
    TransferService?: XOR<TransferServiceNullableRelationFilter, TransferServiceWhereInput> | null
    Storage?: XOR<StorageNullableRelationFilter, StorageWhereInput> | null
  }

  export type GuarantOrderByWithRelationInput = {
    id?: SortOrder
    sellerId?: SortOrder
    transferServiceId?: SortOrderInput | SortOrder
    storageId?: SortOrderInput | SortOrder
    seller?: SellerOrderByWithRelationInput
    Buyer?: BuyerOrderByRelationAggregateInput
    TransferService?: TransferServiceOrderByWithRelationInput
    Storage?: StorageOrderByWithRelationInput
  }

  export type GuarantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GuarantWhereInput | GuarantWhereInput[]
    OR?: GuarantWhereInput[]
    NOT?: GuarantWhereInput | GuarantWhereInput[]
    sellerId?: IntFilter<"Guarant"> | number
    transferServiceId?: IntNullableFilter<"Guarant"> | number | null
    storageId?: IntNullableFilter<"Guarant"> | number | null
    seller?: XOR<SellerRelationFilter, SellerWhereInput>
    Buyer?: BuyerListRelationFilter
    TransferService?: XOR<TransferServiceNullableRelationFilter, TransferServiceWhereInput> | null
    Storage?: XOR<StorageNullableRelationFilter, StorageWhereInput> | null
  }, "id">

  export type GuarantOrderByWithAggregationInput = {
    id?: SortOrder
    sellerId?: SortOrder
    transferServiceId?: SortOrderInput | SortOrder
    storageId?: SortOrderInput | SortOrder
    _count?: GuarantCountOrderByAggregateInput
    _avg?: GuarantAvgOrderByAggregateInput
    _max?: GuarantMaxOrderByAggregateInput
    _min?: GuarantMinOrderByAggregateInput
    _sum?: GuarantSumOrderByAggregateInput
  }

  export type GuarantScalarWhereWithAggregatesInput = {
    AND?: GuarantScalarWhereWithAggregatesInput | GuarantScalarWhereWithAggregatesInput[]
    OR?: GuarantScalarWhereWithAggregatesInput[]
    NOT?: GuarantScalarWhereWithAggregatesInput | GuarantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Guarant"> | number
    sellerId?: IntWithAggregatesFilter<"Guarant"> | number
    transferServiceId?: IntNullableWithAggregatesFilter<"Guarant"> | number | null
    storageId?: IntNullableWithAggregatesFilter<"Guarant"> | number | null
  }

  export type TransferServiceWhereInput = {
    AND?: TransferServiceWhereInput | TransferServiceWhereInput[]
    OR?: TransferServiceWhereInput[]
    NOT?: TransferServiceWhereInput | TransferServiceWhereInput[]
    id?: IntFilter<"TransferService"> | number
    storages?: StorageListRelationFilter
    departments?: DepartmentListRelationFilter
    guarants?: GuarantListRelationFilter
  }

  export type TransferServiceOrderByWithRelationInput = {
    id?: SortOrder
    storages?: StorageOrderByRelationAggregateInput
    departments?: DepartmentOrderByRelationAggregateInput
    guarants?: GuarantOrderByRelationAggregateInput
  }

  export type TransferServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransferServiceWhereInput | TransferServiceWhereInput[]
    OR?: TransferServiceWhereInput[]
    NOT?: TransferServiceWhereInput | TransferServiceWhereInput[]
    storages?: StorageListRelationFilter
    departments?: DepartmentListRelationFilter
    guarants?: GuarantListRelationFilter
  }, "id">

  export type TransferServiceOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: TransferServiceCountOrderByAggregateInput
    _avg?: TransferServiceAvgOrderByAggregateInput
    _max?: TransferServiceMaxOrderByAggregateInput
    _min?: TransferServiceMinOrderByAggregateInput
    _sum?: TransferServiceSumOrderByAggregateInput
  }

  export type TransferServiceScalarWhereWithAggregatesInput = {
    AND?: TransferServiceScalarWhereWithAggregatesInput | TransferServiceScalarWhereWithAggregatesInput[]
    OR?: TransferServiceScalarWhereWithAggregatesInput[]
    NOT?: TransferServiceScalarWhereWithAggregatesInput | TransferServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TransferService"> | number
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: IntFilter<"Department"> | number
    transferServiceId?: IntNullableFilter<"Department"> | number | null
    TransferService?: XOR<TransferServiceNullableRelationFilter, TransferServiceWhereInput> | null
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    transferServiceId?: SortOrderInput | SortOrder
    TransferService?: TransferServiceOrderByWithRelationInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    transferServiceId?: IntNullableFilter<"Department"> | number | null
    TransferService?: XOR<TransferServiceNullableRelationFilter, TransferServiceWhereInput> | null
  }, "id">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    transferServiceId?: SortOrderInput | SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Department"> | number
    transferServiceId?: IntNullableWithAggregatesFilter<"Department"> | number | null
  }

  export type StorageWhereInput = {
    AND?: StorageWhereInput | StorageWhereInput[]
    OR?: StorageWhereInput[]
    NOT?: StorageWhereInput | StorageWhereInput[]
    id?: IntFilter<"Storage"> | number
    transferServiceId?: IntNullableFilter<"Storage"> | number | null
    buyers?: BuyerListRelationFilter
    sellers?: SellerListRelationFilter
    guarants?: GuarantListRelationFilter
    TransferService?: XOR<TransferServiceNullableRelationFilter, TransferServiceWhereInput> | null
  }

  export type StorageOrderByWithRelationInput = {
    id?: SortOrder
    transferServiceId?: SortOrderInput | SortOrder
    buyers?: BuyerOrderByRelationAggregateInput
    sellers?: SellerOrderByRelationAggregateInput
    guarants?: GuarantOrderByRelationAggregateInput
    TransferService?: TransferServiceOrderByWithRelationInput
  }

  export type StorageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StorageWhereInput | StorageWhereInput[]
    OR?: StorageWhereInput[]
    NOT?: StorageWhereInput | StorageWhereInput[]
    transferServiceId?: IntNullableFilter<"Storage"> | number | null
    buyers?: BuyerListRelationFilter
    sellers?: SellerListRelationFilter
    guarants?: GuarantListRelationFilter
    TransferService?: XOR<TransferServiceNullableRelationFilter, TransferServiceWhereInput> | null
  }, "id">

  export type StorageOrderByWithAggregationInput = {
    id?: SortOrder
    transferServiceId?: SortOrderInput | SortOrder
    _count?: StorageCountOrderByAggregateInput
    _avg?: StorageAvgOrderByAggregateInput
    _max?: StorageMaxOrderByAggregateInput
    _min?: StorageMinOrderByAggregateInput
    _sum?: StorageSumOrderByAggregateInput
  }

  export type StorageScalarWhereWithAggregatesInput = {
    AND?: StorageScalarWhereWithAggregatesInput | StorageScalarWhereWithAggregatesInput[]
    OR?: StorageScalarWhereWithAggregatesInput[]
    NOT?: StorageScalarWhereWithAggregatesInput | StorageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Storage"> | number
    transferServiceId?: IntNullableWithAggregatesFilter<"Storage"> | number | null
  }

  export type SellerCreateInput = {
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    most_frequent_buyers?: BuyerCreateNestedManyWithoutSellerInput
    favourite_category?: CategoryCreateNestedOneWithoutSellerInput
    Storage?: StorageCreateNestedOneWithoutSellersInput
    Guarant?: GuarantCreateNestedManyWithoutSellerInput
  }

  export type SellerUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    categoryId?: number | null
    storageId?: number | null
    most_frequent_buyers?: BuyerUncheckedCreateNestedManyWithoutSellerInput
    Guarant?: GuarantUncheckedCreateNestedManyWithoutSellerInput
  }

  export type SellerUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    most_frequent_buyers?: BuyerUpdateManyWithoutSellerNestedInput
    favourite_category?: CategoryUpdateOneWithoutSellerNestedInput
    Storage?: StorageUpdateOneWithoutSellersNestedInput
    Guarant?: GuarantUpdateManyWithoutSellerNestedInput
  }

  export type SellerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    most_frequent_buyers?: BuyerUncheckedUpdateManyWithoutSellerNestedInput
    Guarant?: GuarantUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type SellerCreateManyInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    categoryId?: number | null
    storageId?: number | null
  }

  export type SellerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
  }

  export type SellerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BuyerCreateInput = {
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    Seller?: SellerCreateNestedOneWithoutMost_frequent_buyersInput
    Storage?: StorageCreateNestedOneWithoutBuyersInput
    guarant: GuarantCreateNestedOneWithoutBuyerInput
    Comment?: CommentCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    sellerId?: number | null
    storageId?: number | null
    guarantId: number
    Comment?: CommentUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    Seller?: SellerUpdateOneWithoutMost_frequent_buyersNestedInput
    Storage?: StorageUpdateOneWithoutBuyersNestedInput
    guarant?: GuarantUpdateOneRequiredWithoutBuyerNestedInput
    Comment?: CommentUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    sellerId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    guarantId?: IntFieldUpdateOperationsInput | number
    Comment?: CommentUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerCreateManyInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    sellerId?: number | null
    storageId?: number | null
    guarantId: number
  }

  export type BuyerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    sellerId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    guarantId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateInput = {
    name: string
    placed_items_number?: number
    description: string
    Seller?: SellerCreateNestedManyWithoutFavourite_categoryInput
    placed_items?: ItemCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    placed_items_number?: number
    description: string
    Seller?: SellerUncheckedCreateNestedManyWithoutFavourite_categoryInput
    placed_items?: ItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    placed_items_number?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Seller?: SellerUpdateManyWithoutFavourite_categoryNestedInput
    placed_items?: ItemUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    placed_items_number?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Seller?: SellerUncheckedUpdateManyWithoutFavourite_categoryNestedInput
    placed_items?: ItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    placed_items_number?: number
    description: string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    placed_items_number?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    placed_items_number?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ItemCreateInput = {
    name: string
    createdAt?: Date | string
    placedAt?: Date | string | null
    description: string
    Category?: CategoryCreateNestedOneWithoutPlaced_itemsInput
  }

  export type ItemUncheckedCreateInput = {
    id?: number
    categoryId?: number | null
    name: string
    createdAt?: Date | string
    placedAt?: Date | string | null
    description: string
  }

  export type ItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    placedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
    Category?: CategoryUpdateOneWithoutPlaced_itemsNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    placedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ItemCreateManyInput = {
    id?: number
    categoryId?: number | null
    name: string
    createdAt?: Date | string
    placedAt?: Date | string | null
    description: string
  }

  export type ItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    placedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    placedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    title: string
    body: string
    buyer: BuyerCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    title: string
    body: string
    buyerId: number
  }

  export type CommentUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    buyer?: BuyerUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    buyerId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyInput = {
    id?: number
    title: string
    body: string
    buyerId: number
  }

  export type CommentUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    buyerId?: IntFieldUpdateOperationsInput | number
  }

  export type GuarantCreateInput = {
    seller: SellerCreateNestedOneWithoutGuarantInput
    Buyer?: BuyerCreateNestedManyWithoutGuarantInput
    TransferService?: TransferServiceCreateNestedOneWithoutGuarantsInput
    Storage?: StorageCreateNestedOneWithoutGuarantsInput
  }

  export type GuarantUncheckedCreateInput = {
    id?: number
    sellerId: number
    transferServiceId?: number | null
    storageId?: number | null
    Buyer?: BuyerUncheckedCreateNestedManyWithoutGuarantInput
  }

  export type GuarantUpdateInput = {
    seller?: SellerUpdateOneRequiredWithoutGuarantNestedInput
    Buyer?: BuyerUpdateManyWithoutGuarantNestedInput
    TransferService?: TransferServiceUpdateOneWithoutGuarantsNestedInput
    Storage?: StorageUpdateOneWithoutGuarantsNestedInput
  }

  export type GuarantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    Buyer?: BuyerUncheckedUpdateManyWithoutGuarantNestedInput
  }

  export type GuarantCreateManyInput = {
    id?: number
    sellerId: number
    transferServiceId?: number | null
    storageId?: number | null
  }

  export type GuarantUpdateManyMutationInput = {

  }

  export type GuarantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TransferServiceCreateInput = {
    storages?: StorageCreateNestedManyWithoutTransferServiceInput
    departments?: DepartmentCreateNestedManyWithoutTransferServiceInput
    guarants?: GuarantCreateNestedManyWithoutTransferServiceInput
  }

  export type TransferServiceUncheckedCreateInput = {
    id?: number
    storages?: StorageUncheckedCreateNestedManyWithoutTransferServiceInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTransferServiceInput
    guarants?: GuarantUncheckedCreateNestedManyWithoutTransferServiceInput
  }

  export type TransferServiceUpdateInput = {
    storages?: StorageUpdateManyWithoutTransferServiceNestedInput
    departments?: DepartmentUpdateManyWithoutTransferServiceNestedInput
    guarants?: GuarantUpdateManyWithoutTransferServiceNestedInput
  }

  export type TransferServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    storages?: StorageUncheckedUpdateManyWithoutTransferServiceNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTransferServiceNestedInput
    guarants?: GuarantUncheckedUpdateManyWithoutTransferServiceNestedInput
  }

  export type TransferServiceCreateManyInput = {
    id?: number
  }

  export type TransferServiceUpdateManyMutationInput = {

  }

  export type TransferServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentCreateInput = {
    TransferService?: TransferServiceCreateNestedOneWithoutDepartmentsInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: number
    transferServiceId?: number | null
  }

  export type DepartmentUpdateInput = {
    TransferService?: TransferServiceUpdateOneWithoutDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DepartmentCreateManyInput = {
    id?: number
    transferServiceId?: number | null
  }

  export type DepartmentUpdateManyMutationInput = {

  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StorageCreateInput = {
    buyers?: BuyerCreateNestedManyWithoutStorageInput
    sellers?: SellerCreateNestedManyWithoutStorageInput
    guarants?: GuarantCreateNestedManyWithoutStorageInput
    TransferService?: TransferServiceCreateNestedOneWithoutStoragesInput
  }

  export type StorageUncheckedCreateInput = {
    id?: number
    transferServiceId?: number | null
    buyers?: BuyerUncheckedCreateNestedManyWithoutStorageInput
    sellers?: SellerUncheckedCreateNestedManyWithoutStorageInput
    guarants?: GuarantUncheckedCreateNestedManyWithoutStorageInput
  }

  export type StorageUpdateInput = {
    buyers?: BuyerUpdateManyWithoutStorageNestedInput
    sellers?: SellerUpdateManyWithoutStorageNestedInput
    guarants?: GuarantUpdateManyWithoutStorageNestedInput
    TransferService?: TransferServiceUpdateOneWithoutStoragesNestedInput
  }

  export type StorageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
    buyers?: BuyerUncheckedUpdateManyWithoutStorageNestedInput
    sellers?: SellerUncheckedUpdateManyWithoutStorageNestedInput
    guarants?: GuarantUncheckedUpdateManyWithoutStorageNestedInput
  }

  export type StorageCreateManyInput = {
    id?: number
    transferServiceId?: number | null
  }

  export type StorageUpdateManyMutationInput = {

  }

  export type StorageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BuyerListRelationFilter = {
    every?: BuyerWhereInput
    some?: BuyerWhereInput
    none?: BuyerWhereInput
  }

  export type CategoryNullableRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type StorageNullableRelationFilter = {
    is?: StorageWhereInput | null
    isNot?: StorageWhereInput | null
  }

  export type GuarantListRelationFilter = {
    every?: GuarantWhereInput
    some?: GuarantWhereInput
    none?: GuarantWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BuyerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GuarantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SellerCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    birth_date?: SortOrder
    bio?: SortOrder
    last_time_online?: SortOrder
    sold_items?: SortOrder
    joined?: SortOrder
    total_items_placed?: SortOrder
    items_placed_now?: SortOrder
    categoryId?: SortOrder
    storageId?: SortOrder
  }

  export type SellerAvgOrderByAggregateInput = {
    id?: SortOrder
    sold_items?: SortOrder
    total_items_placed?: SortOrder
    items_placed_now?: SortOrder
    categoryId?: SortOrder
    storageId?: SortOrder
  }

  export type SellerMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    birth_date?: SortOrder
    bio?: SortOrder
    last_time_online?: SortOrder
    sold_items?: SortOrder
    joined?: SortOrder
    total_items_placed?: SortOrder
    items_placed_now?: SortOrder
    categoryId?: SortOrder
    storageId?: SortOrder
  }

  export type SellerMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    birth_date?: SortOrder
    bio?: SortOrder
    last_time_online?: SortOrder
    sold_items?: SortOrder
    joined?: SortOrder
    total_items_placed?: SortOrder
    items_placed_now?: SortOrder
    categoryId?: SortOrder
    storageId?: SortOrder
  }

  export type SellerSumOrderByAggregateInput = {
    id?: SortOrder
    sold_items?: SortOrder
    total_items_placed?: SortOrder
    items_placed_now?: SortOrder
    categoryId?: SortOrder
    storageId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SellerNullableRelationFilter = {
    is?: SellerWhereInput | null
    isNot?: SellerWhereInput | null
  }

  export type GuarantRelationFilter = {
    is?: GuarantWhereInput
    isNot?: GuarantWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuyerCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    birth_date?: SortOrder
    bio?: SortOrder
    last_time_online?: SortOrder
    bought_items?: SortOrder
    joined?: SortOrder
    sellerId?: SortOrder
    storageId?: SortOrder
    guarantId?: SortOrder
  }

  export type BuyerAvgOrderByAggregateInput = {
    id?: SortOrder
    bought_items?: SortOrder
    sellerId?: SortOrder
    storageId?: SortOrder
    guarantId?: SortOrder
  }

  export type BuyerMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    birth_date?: SortOrder
    bio?: SortOrder
    last_time_online?: SortOrder
    bought_items?: SortOrder
    joined?: SortOrder
    sellerId?: SortOrder
    storageId?: SortOrder
    guarantId?: SortOrder
  }

  export type BuyerMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    birth_date?: SortOrder
    bio?: SortOrder
    last_time_online?: SortOrder
    bought_items?: SortOrder
    joined?: SortOrder
    sellerId?: SortOrder
    storageId?: SortOrder
    guarantId?: SortOrder
  }

  export type BuyerSumOrderByAggregateInput = {
    id?: SortOrder
    bought_items?: SortOrder
    sellerId?: SortOrder
    storageId?: SortOrder
    guarantId?: SortOrder
  }

  export type SellerListRelationFilter = {
    every?: SellerWhereInput
    some?: SellerWhereInput
    none?: SellerWhereInput
  }

  export type ItemListRelationFilter = {
    every?: ItemWhereInput
    some?: ItemWhereInput
    none?: ItemWhereInput
  }

  export type SellerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    placed_items_number?: SortOrder
    description?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    placed_items_number?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    placed_items_number?: SortOrder
    description?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    placed_items_number?: SortOrder
    description?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
    placed_items_number?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    placedAt?: SortOrder
    description?: SortOrder
  }

  export type ItemAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    placedAt?: SortOrder
    description?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    placedAt?: SortOrder
    description?: SortOrder
  }

  export type ItemSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BuyerRelationFilter = {
    is?: BuyerWhereInput
    isNot?: BuyerWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    buyerId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    buyerId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    buyerId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
  }

  export type SellerRelationFilter = {
    is?: SellerWhereInput
    isNot?: SellerWhereInput
  }

  export type TransferServiceNullableRelationFilter = {
    is?: TransferServiceWhereInput | null
    isNot?: TransferServiceWhereInput | null
  }

  export type GuarantCountOrderByAggregateInput = {
    id?: SortOrder
    sellerId?: SortOrder
    transferServiceId?: SortOrder
    storageId?: SortOrder
  }

  export type GuarantAvgOrderByAggregateInput = {
    id?: SortOrder
    sellerId?: SortOrder
    transferServiceId?: SortOrder
    storageId?: SortOrder
  }

  export type GuarantMaxOrderByAggregateInput = {
    id?: SortOrder
    sellerId?: SortOrder
    transferServiceId?: SortOrder
    storageId?: SortOrder
  }

  export type GuarantMinOrderByAggregateInput = {
    id?: SortOrder
    sellerId?: SortOrder
    transferServiceId?: SortOrder
    storageId?: SortOrder
  }

  export type GuarantSumOrderByAggregateInput = {
    id?: SortOrder
    sellerId?: SortOrder
    transferServiceId?: SortOrder
    storageId?: SortOrder
  }

  export type StorageListRelationFilter = {
    every?: StorageWhereInput
    some?: StorageWhereInput
    none?: StorageWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type StorageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransferServiceCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TransferServiceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TransferServiceMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TransferServiceMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TransferServiceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    transferServiceId?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    id?: SortOrder
    transferServiceId?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    transferServiceId?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    transferServiceId?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    id?: SortOrder
    transferServiceId?: SortOrder
  }

  export type StorageCountOrderByAggregateInput = {
    id?: SortOrder
    transferServiceId?: SortOrder
  }

  export type StorageAvgOrderByAggregateInput = {
    id?: SortOrder
    transferServiceId?: SortOrder
  }

  export type StorageMaxOrderByAggregateInput = {
    id?: SortOrder
    transferServiceId?: SortOrder
  }

  export type StorageMinOrderByAggregateInput = {
    id?: SortOrder
    transferServiceId?: SortOrder
  }

  export type StorageSumOrderByAggregateInput = {
    id?: SortOrder
    transferServiceId?: SortOrder
  }

  export type BuyerCreateNestedManyWithoutSellerInput = {
    create?: XOR<BuyerCreateWithoutSellerInput, BuyerUncheckedCreateWithoutSellerInput> | BuyerCreateWithoutSellerInput[] | BuyerUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutSellerInput | BuyerCreateOrConnectWithoutSellerInput[]
    createMany?: BuyerCreateManySellerInputEnvelope
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutSellerInput = {
    create?: XOR<CategoryCreateWithoutSellerInput, CategoryUncheckedCreateWithoutSellerInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSellerInput
    connect?: CategoryWhereUniqueInput
  }

  export type StorageCreateNestedOneWithoutSellersInput = {
    create?: XOR<StorageCreateWithoutSellersInput, StorageUncheckedCreateWithoutSellersInput>
    connectOrCreate?: StorageCreateOrConnectWithoutSellersInput
    connect?: StorageWhereUniqueInput
  }

  export type GuarantCreateNestedManyWithoutSellerInput = {
    create?: XOR<GuarantCreateWithoutSellerInput, GuarantUncheckedCreateWithoutSellerInput> | GuarantCreateWithoutSellerInput[] | GuarantUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutSellerInput | GuarantCreateOrConnectWithoutSellerInput[]
    createMany?: GuarantCreateManySellerInputEnvelope
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
  }

  export type BuyerUncheckedCreateNestedManyWithoutSellerInput = {
    create?: XOR<BuyerCreateWithoutSellerInput, BuyerUncheckedCreateWithoutSellerInput> | BuyerCreateWithoutSellerInput[] | BuyerUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutSellerInput | BuyerCreateOrConnectWithoutSellerInput[]
    createMany?: BuyerCreateManySellerInputEnvelope
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
  }

  export type GuarantUncheckedCreateNestedManyWithoutSellerInput = {
    create?: XOR<GuarantCreateWithoutSellerInput, GuarantUncheckedCreateWithoutSellerInput> | GuarantCreateWithoutSellerInput[] | GuarantUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutSellerInput | GuarantCreateOrConnectWithoutSellerInput[]
    createMany?: GuarantCreateManySellerInputEnvelope
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BuyerUpdateManyWithoutSellerNestedInput = {
    create?: XOR<BuyerCreateWithoutSellerInput, BuyerUncheckedCreateWithoutSellerInput> | BuyerCreateWithoutSellerInput[] | BuyerUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutSellerInput | BuyerCreateOrConnectWithoutSellerInput[]
    upsert?: BuyerUpsertWithWhereUniqueWithoutSellerInput | BuyerUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: BuyerCreateManySellerInputEnvelope
    set?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    disconnect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    delete?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    update?: BuyerUpdateWithWhereUniqueWithoutSellerInput | BuyerUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: BuyerUpdateManyWithWhereWithoutSellerInput | BuyerUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: BuyerScalarWhereInput | BuyerScalarWhereInput[]
  }

  export type CategoryUpdateOneWithoutSellerNestedInput = {
    create?: XOR<CategoryCreateWithoutSellerInput, CategoryUncheckedCreateWithoutSellerInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSellerInput
    upsert?: CategoryUpsertWithoutSellerInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutSellerInput, CategoryUpdateWithoutSellerInput>, CategoryUncheckedUpdateWithoutSellerInput>
  }

  export type StorageUpdateOneWithoutSellersNestedInput = {
    create?: XOR<StorageCreateWithoutSellersInput, StorageUncheckedCreateWithoutSellersInput>
    connectOrCreate?: StorageCreateOrConnectWithoutSellersInput
    upsert?: StorageUpsertWithoutSellersInput
    disconnect?: StorageWhereInput | boolean
    delete?: StorageWhereInput | boolean
    connect?: StorageWhereUniqueInput
    update?: XOR<XOR<StorageUpdateToOneWithWhereWithoutSellersInput, StorageUpdateWithoutSellersInput>, StorageUncheckedUpdateWithoutSellersInput>
  }

  export type GuarantUpdateManyWithoutSellerNestedInput = {
    create?: XOR<GuarantCreateWithoutSellerInput, GuarantUncheckedCreateWithoutSellerInput> | GuarantCreateWithoutSellerInput[] | GuarantUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutSellerInput | GuarantCreateOrConnectWithoutSellerInput[]
    upsert?: GuarantUpsertWithWhereUniqueWithoutSellerInput | GuarantUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: GuarantCreateManySellerInputEnvelope
    set?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    disconnect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    delete?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    update?: GuarantUpdateWithWhereUniqueWithoutSellerInput | GuarantUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: GuarantUpdateManyWithWhereWithoutSellerInput | GuarantUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: GuarantScalarWhereInput | GuarantScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BuyerUncheckedUpdateManyWithoutSellerNestedInput = {
    create?: XOR<BuyerCreateWithoutSellerInput, BuyerUncheckedCreateWithoutSellerInput> | BuyerCreateWithoutSellerInput[] | BuyerUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutSellerInput | BuyerCreateOrConnectWithoutSellerInput[]
    upsert?: BuyerUpsertWithWhereUniqueWithoutSellerInput | BuyerUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: BuyerCreateManySellerInputEnvelope
    set?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    disconnect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    delete?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    update?: BuyerUpdateWithWhereUniqueWithoutSellerInput | BuyerUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: BuyerUpdateManyWithWhereWithoutSellerInput | BuyerUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: BuyerScalarWhereInput | BuyerScalarWhereInput[]
  }

  export type GuarantUncheckedUpdateManyWithoutSellerNestedInput = {
    create?: XOR<GuarantCreateWithoutSellerInput, GuarantUncheckedCreateWithoutSellerInput> | GuarantCreateWithoutSellerInput[] | GuarantUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutSellerInput | GuarantCreateOrConnectWithoutSellerInput[]
    upsert?: GuarantUpsertWithWhereUniqueWithoutSellerInput | GuarantUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: GuarantCreateManySellerInputEnvelope
    set?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    disconnect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    delete?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    update?: GuarantUpdateWithWhereUniqueWithoutSellerInput | GuarantUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: GuarantUpdateManyWithWhereWithoutSellerInput | GuarantUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: GuarantScalarWhereInput | GuarantScalarWhereInput[]
  }

  export type SellerCreateNestedOneWithoutMost_frequent_buyersInput = {
    create?: XOR<SellerCreateWithoutMost_frequent_buyersInput, SellerUncheckedCreateWithoutMost_frequent_buyersInput>
    connectOrCreate?: SellerCreateOrConnectWithoutMost_frequent_buyersInput
    connect?: SellerWhereUniqueInput
  }

  export type StorageCreateNestedOneWithoutBuyersInput = {
    create?: XOR<StorageCreateWithoutBuyersInput, StorageUncheckedCreateWithoutBuyersInput>
    connectOrCreate?: StorageCreateOrConnectWithoutBuyersInput
    connect?: StorageWhereUniqueInput
  }

  export type GuarantCreateNestedOneWithoutBuyerInput = {
    create?: XOR<GuarantCreateWithoutBuyerInput, GuarantUncheckedCreateWithoutBuyerInput>
    connectOrCreate?: GuarantCreateOrConnectWithoutBuyerInput
    connect?: GuarantWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutBuyerInput = {
    create?: XOR<CommentCreateWithoutBuyerInput, CommentUncheckedCreateWithoutBuyerInput> | CommentCreateWithoutBuyerInput[] | CommentUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBuyerInput | CommentCreateOrConnectWithoutBuyerInput[]
    createMany?: CommentCreateManyBuyerInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<CommentCreateWithoutBuyerInput, CommentUncheckedCreateWithoutBuyerInput> | CommentCreateWithoutBuyerInput[] | CommentUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBuyerInput | CommentCreateOrConnectWithoutBuyerInput[]
    createMany?: CommentCreateManyBuyerInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type SellerUpdateOneWithoutMost_frequent_buyersNestedInput = {
    create?: XOR<SellerCreateWithoutMost_frequent_buyersInput, SellerUncheckedCreateWithoutMost_frequent_buyersInput>
    connectOrCreate?: SellerCreateOrConnectWithoutMost_frequent_buyersInput
    upsert?: SellerUpsertWithoutMost_frequent_buyersInput
    disconnect?: SellerWhereInput | boolean
    delete?: SellerWhereInput | boolean
    connect?: SellerWhereUniqueInput
    update?: XOR<XOR<SellerUpdateToOneWithWhereWithoutMost_frequent_buyersInput, SellerUpdateWithoutMost_frequent_buyersInput>, SellerUncheckedUpdateWithoutMost_frequent_buyersInput>
  }

  export type StorageUpdateOneWithoutBuyersNestedInput = {
    create?: XOR<StorageCreateWithoutBuyersInput, StorageUncheckedCreateWithoutBuyersInput>
    connectOrCreate?: StorageCreateOrConnectWithoutBuyersInput
    upsert?: StorageUpsertWithoutBuyersInput
    disconnect?: StorageWhereInput | boolean
    delete?: StorageWhereInput | boolean
    connect?: StorageWhereUniqueInput
    update?: XOR<XOR<StorageUpdateToOneWithWhereWithoutBuyersInput, StorageUpdateWithoutBuyersInput>, StorageUncheckedUpdateWithoutBuyersInput>
  }

  export type GuarantUpdateOneRequiredWithoutBuyerNestedInput = {
    create?: XOR<GuarantCreateWithoutBuyerInput, GuarantUncheckedCreateWithoutBuyerInput>
    connectOrCreate?: GuarantCreateOrConnectWithoutBuyerInput
    upsert?: GuarantUpsertWithoutBuyerInput
    connect?: GuarantWhereUniqueInput
    update?: XOR<XOR<GuarantUpdateToOneWithWhereWithoutBuyerInput, GuarantUpdateWithoutBuyerInput>, GuarantUncheckedUpdateWithoutBuyerInput>
  }

  export type CommentUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<CommentCreateWithoutBuyerInput, CommentUncheckedCreateWithoutBuyerInput> | CommentCreateWithoutBuyerInput[] | CommentUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBuyerInput | CommentCreateOrConnectWithoutBuyerInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutBuyerInput | CommentUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: CommentCreateManyBuyerInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutBuyerInput | CommentUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutBuyerInput | CommentUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<CommentCreateWithoutBuyerInput, CommentUncheckedCreateWithoutBuyerInput> | CommentCreateWithoutBuyerInput[] | CommentUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBuyerInput | CommentCreateOrConnectWithoutBuyerInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutBuyerInput | CommentUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: CommentCreateManyBuyerInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutBuyerInput | CommentUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutBuyerInput | CommentUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type SellerCreateNestedManyWithoutFavourite_categoryInput = {
    create?: XOR<SellerCreateWithoutFavourite_categoryInput, SellerUncheckedCreateWithoutFavourite_categoryInput> | SellerCreateWithoutFavourite_categoryInput[] | SellerUncheckedCreateWithoutFavourite_categoryInput[]
    connectOrCreate?: SellerCreateOrConnectWithoutFavourite_categoryInput | SellerCreateOrConnectWithoutFavourite_categoryInput[]
    createMany?: SellerCreateManyFavourite_categoryInputEnvelope
    connect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
  }

  export type ItemCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput> | ItemCreateWithoutCategoryInput[] | ItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCategoryInput | ItemCreateOrConnectWithoutCategoryInput[]
    createMany?: ItemCreateManyCategoryInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type SellerUncheckedCreateNestedManyWithoutFavourite_categoryInput = {
    create?: XOR<SellerCreateWithoutFavourite_categoryInput, SellerUncheckedCreateWithoutFavourite_categoryInput> | SellerCreateWithoutFavourite_categoryInput[] | SellerUncheckedCreateWithoutFavourite_categoryInput[]
    connectOrCreate?: SellerCreateOrConnectWithoutFavourite_categoryInput | SellerCreateOrConnectWithoutFavourite_categoryInput[]
    createMany?: SellerCreateManyFavourite_categoryInputEnvelope
    connect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput> | ItemCreateWithoutCategoryInput[] | ItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCategoryInput | ItemCreateOrConnectWithoutCategoryInput[]
    createMany?: ItemCreateManyCategoryInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type SellerUpdateManyWithoutFavourite_categoryNestedInput = {
    create?: XOR<SellerCreateWithoutFavourite_categoryInput, SellerUncheckedCreateWithoutFavourite_categoryInput> | SellerCreateWithoutFavourite_categoryInput[] | SellerUncheckedCreateWithoutFavourite_categoryInput[]
    connectOrCreate?: SellerCreateOrConnectWithoutFavourite_categoryInput | SellerCreateOrConnectWithoutFavourite_categoryInput[]
    upsert?: SellerUpsertWithWhereUniqueWithoutFavourite_categoryInput | SellerUpsertWithWhereUniqueWithoutFavourite_categoryInput[]
    createMany?: SellerCreateManyFavourite_categoryInputEnvelope
    set?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    disconnect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    delete?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    connect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    update?: SellerUpdateWithWhereUniqueWithoutFavourite_categoryInput | SellerUpdateWithWhereUniqueWithoutFavourite_categoryInput[]
    updateMany?: SellerUpdateManyWithWhereWithoutFavourite_categoryInput | SellerUpdateManyWithWhereWithoutFavourite_categoryInput[]
    deleteMany?: SellerScalarWhereInput | SellerScalarWhereInput[]
  }

  export type ItemUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput> | ItemCreateWithoutCategoryInput[] | ItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCategoryInput | ItemCreateOrConnectWithoutCategoryInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutCategoryInput | ItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ItemCreateManyCategoryInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutCategoryInput | ItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutCategoryInput | ItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type SellerUncheckedUpdateManyWithoutFavourite_categoryNestedInput = {
    create?: XOR<SellerCreateWithoutFavourite_categoryInput, SellerUncheckedCreateWithoutFavourite_categoryInput> | SellerCreateWithoutFavourite_categoryInput[] | SellerUncheckedCreateWithoutFavourite_categoryInput[]
    connectOrCreate?: SellerCreateOrConnectWithoutFavourite_categoryInput | SellerCreateOrConnectWithoutFavourite_categoryInput[]
    upsert?: SellerUpsertWithWhereUniqueWithoutFavourite_categoryInput | SellerUpsertWithWhereUniqueWithoutFavourite_categoryInput[]
    createMany?: SellerCreateManyFavourite_categoryInputEnvelope
    set?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    disconnect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    delete?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    connect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    update?: SellerUpdateWithWhereUniqueWithoutFavourite_categoryInput | SellerUpdateWithWhereUniqueWithoutFavourite_categoryInput[]
    updateMany?: SellerUpdateManyWithWhereWithoutFavourite_categoryInput | SellerUpdateManyWithWhereWithoutFavourite_categoryInput[]
    deleteMany?: SellerScalarWhereInput | SellerScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput> | ItemCreateWithoutCategoryInput[] | ItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCategoryInput | ItemCreateOrConnectWithoutCategoryInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutCategoryInput | ItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ItemCreateManyCategoryInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutCategoryInput | ItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutCategoryInput | ItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutPlaced_itemsInput = {
    create?: XOR<CategoryCreateWithoutPlaced_itemsInput, CategoryUncheckedCreateWithoutPlaced_itemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutPlaced_itemsInput
    connect?: CategoryWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CategoryUpdateOneWithoutPlaced_itemsNestedInput = {
    create?: XOR<CategoryCreateWithoutPlaced_itemsInput, CategoryUncheckedCreateWithoutPlaced_itemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutPlaced_itemsInput
    upsert?: CategoryUpsertWithoutPlaced_itemsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutPlaced_itemsInput, CategoryUpdateWithoutPlaced_itemsInput>, CategoryUncheckedUpdateWithoutPlaced_itemsInput>
  }

  export type BuyerCreateNestedOneWithoutCommentInput = {
    create?: XOR<BuyerCreateWithoutCommentInput, BuyerUncheckedCreateWithoutCommentInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutCommentInput
    connect?: BuyerWhereUniqueInput
  }

  export type BuyerUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<BuyerCreateWithoutCommentInput, BuyerUncheckedCreateWithoutCommentInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutCommentInput
    upsert?: BuyerUpsertWithoutCommentInput
    connect?: BuyerWhereUniqueInput
    update?: XOR<XOR<BuyerUpdateToOneWithWhereWithoutCommentInput, BuyerUpdateWithoutCommentInput>, BuyerUncheckedUpdateWithoutCommentInput>
  }

  export type SellerCreateNestedOneWithoutGuarantInput = {
    create?: XOR<SellerCreateWithoutGuarantInput, SellerUncheckedCreateWithoutGuarantInput>
    connectOrCreate?: SellerCreateOrConnectWithoutGuarantInput
    connect?: SellerWhereUniqueInput
  }

  export type BuyerCreateNestedManyWithoutGuarantInput = {
    create?: XOR<BuyerCreateWithoutGuarantInput, BuyerUncheckedCreateWithoutGuarantInput> | BuyerCreateWithoutGuarantInput[] | BuyerUncheckedCreateWithoutGuarantInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutGuarantInput | BuyerCreateOrConnectWithoutGuarantInput[]
    createMany?: BuyerCreateManyGuarantInputEnvelope
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
  }

  export type TransferServiceCreateNestedOneWithoutGuarantsInput = {
    create?: XOR<TransferServiceCreateWithoutGuarantsInput, TransferServiceUncheckedCreateWithoutGuarantsInput>
    connectOrCreate?: TransferServiceCreateOrConnectWithoutGuarantsInput
    connect?: TransferServiceWhereUniqueInput
  }

  export type StorageCreateNestedOneWithoutGuarantsInput = {
    create?: XOR<StorageCreateWithoutGuarantsInput, StorageUncheckedCreateWithoutGuarantsInput>
    connectOrCreate?: StorageCreateOrConnectWithoutGuarantsInput
    connect?: StorageWhereUniqueInput
  }

  export type BuyerUncheckedCreateNestedManyWithoutGuarantInput = {
    create?: XOR<BuyerCreateWithoutGuarantInput, BuyerUncheckedCreateWithoutGuarantInput> | BuyerCreateWithoutGuarantInput[] | BuyerUncheckedCreateWithoutGuarantInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutGuarantInput | BuyerCreateOrConnectWithoutGuarantInput[]
    createMany?: BuyerCreateManyGuarantInputEnvelope
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
  }

  export type SellerUpdateOneRequiredWithoutGuarantNestedInput = {
    create?: XOR<SellerCreateWithoutGuarantInput, SellerUncheckedCreateWithoutGuarantInput>
    connectOrCreate?: SellerCreateOrConnectWithoutGuarantInput
    upsert?: SellerUpsertWithoutGuarantInput
    connect?: SellerWhereUniqueInput
    update?: XOR<XOR<SellerUpdateToOneWithWhereWithoutGuarantInput, SellerUpdateWithoutGuarantInput>, SellerUncheckedUpdateWithoutGuarantInput>
  }

  export type BuyerUpdateManyWithoutGuarantNestedInput = {
    create?: XOR<BuyerCreateWithoutGuarantInput, BuyerUncheckedCreateWithoutGuarantInput> | BuyerCreateWithoutGuarantInput[] | BuyerUncheckedCreateWithoutGuarantInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutGuarantInput | BuyerCreateOrConnectWithoutGuarantInput[]
    upsert?: BuyerUpsertWithWhereUniqueWithoutGuarantInput | BuyerUpsertWithWhereUniqueWithoutGuarantInput[]
    createMany?: BuyerCreateManyGuarantInputEnvelope
    set?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    disconnect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    delete?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    update?: BuyerUpdateWithWhereUniqueWithoutGuarantInput | BuyerUpdateWithWhereUniqueWithoutGuarantInput[]
    updateMany?: BuyerUpdateManyWithWhereWithoutGuarantInput | BuyerUpdateManyWithWhereWithoutGuarantInput[]
    deleteMany?: BuyerScalarWhereInput | BuyerScalarWhereInput[]
  }

  export type TransferServiceUpdateOneWithoutGuarantsNestedInput = {
    create?: XOR<TransferServiceCreateWithoutGuarantsInput, TransferServiceUncheckedCreateWithoutGuarantsInput>
    connectOrCreate?: TransferServiceCreateOrConnectWithoutGuarantsInput
    upsert?: TransferServiceUpsertWithoutGuarantsInput
    disconnect?: TransferServiceWhereInput | boolean
    delete?: TransferServiceWhereInput | boolean
    connect?: TransferServiceWhereUniqueInput
    update?: XOR<XOR<TransferServiceUpdateToOneWithWhereWithoutGuarantsInput, TransferServiceUpdateWithoutGuarantsInput>, TransferServiceUncheckedUpdateWithoutGuarantsInput>
  }

  export type StorageUpdateOneWithoutGuarantsNestedInput = {
    create?: XOR<StorageCreateWithoutGuarantsInput, StorageUncheckedCreateWithoutGuarantsInput>
    connectOrCreate?: StorageCreateOrConnectWithoutGuarantsInput
    upsert?: StorageUpsertWithoutGuarantsInput
    disconnect?: StorageWhereInput | boolean
    delete?: StorageWhereInput | boolean
    connect?: StorageWhereUniqueInput
    update?: XOR<XOR<StorageUpdateToOneWithWhereWithoutGuarantsInput, StorageUpdateWithoutGuarantsInput>, StorageUncheckedUpdateWithoutGuarantsInput>
  }

  export type BuyerUncheckedUpdateManyWithoutGuarantNestedInput = {
    create?: XOR<BuyerCreateWithoutGuarantInput, BuyerUncheckedCreateWithoutGuarantInput> | BuyerCreateWithoutGuarantInput[] | BuyerUncheckedCreateWithoutGuarantInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutGuarantInput | BuyerCreateOrConnectWithoutGuarantInput[]
    upsert?: BuyerUpsertWithWhereUniqueWithoutGuarantInput | BuyerUpsertWithWhereUniqueWithoutGuarantInput[]
    createMany?: BuyerCreateManyGuarantInputEnvelope
    set?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    disconnect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    delete?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    update?: BuyerUpdateWithWhereUniqueWithoutGuarantInput | BuyerUpdateWithWhereUniqueWithoutGuarantInput[]
    updateMany?: BuyerUpdateManyWithWhereWithoutGuarantInput | BuyerUpdateManyWithWhereWithoutGuarantInput[]
    deleteMany?: BuyerScalarWhereInput | BuyerScalarWhereInput[]
  }

  export type StorageCreateNestedManyWithoutTransferServiceInput = {
    create?: XOR<StorageCreateWithoutTransferServiceInput, StorageUncheckedCreateWithoutTransferServiceInput> | StorageCreateWithoutTransferServiceInput[] | StorageUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: StorageCreateOrConnectWithoutTransferServiceInput | StorageCreateOrConnectWithoutTransferServiceInput[]
    createMany?: StorageCreateManyTransferServiceInputEnvelope
    connect?: StorageWhereUniqueInput | StorageWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutTransferServiceInput = {
    create?: XOR<DepartmentCreateWithoutTransferServiceInput, DepartmentUncheckedCreateWithoutTransferServiceInput> | DepartmentCreateWithoutTransferServiceInput[] | DepartmentUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTransferServiceInput | DepartmentCreateOrConnectWithoutTransferServiceInput[]
    createMany?: DepartmentCreateManyTransferServiceInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type GuarantCreateNestedManyWithoutTransferServiceInput = {
    create?: XOR<GuarantCreateWithoutTransferServiceInput, GuarantUncheckedCreateWithoutTransferServiceInput> | GuarantCreateWithoutTransferServiceInput[] | GuarantUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutTransferServiceInput | GuarantCreateOrConnectWithoutTransferServiceInput[]
    createMany?: GuarantCreateManyTransferServiceInputEnvelope
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
  }

  export type StorageUncheckedCreateNestedManyWithoutTransferServiceInput = {
    create?: XOR<StorageCreateWithoutTransferServiceInput, StorageUncheckedCreateWithoutTransferServiceInput> | StorageCreateWithoutTransferServiceInput[] | StorageUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: StorageCreateOrConnectWithoutTransferServiceInput | StorageCreateOrConnectWithoutTransferServiceInput[]
    createMany?: StorageCreateManyTransferServiceInputEnvelope
    connect?: StorageWhereUniqueInput | StorageWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutTransferServiceInput = {
    create?: XOR<DepartmentCreateWithoutTransferServiceInput, DepartmentUncheckedCreateWithoutTransferServiceInput> | DepartmentCreateWithoutTransferServiceInput[] | DepartmentUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTransferServiceInput | DepartmentCreateOrConnectWithoutTransferServiceInput[]
    createMany?: DepartmentCreateManyTransferServiceInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type GuarantUncheckedCreateNestedManyWithoutTransferServiceInput = {
    create?: XOR<GuarantCreateWithoutTransferServiceInput, GuarantUncheckedCreateWithoutTransferServiceInput> | GuarantCreateWithoutTransferServiceInput[] | GuarantUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutTransferServiceInput | GuarantCreateOrConnectWithoutTransferServiceInput[]
    createMany?: GuarantCreateManyTransferServiceInputEnvelope
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
  }

  export type StorageUpdateManyWithoutTransferServiceNestedInput = {
    create?: XOR<StorageCreateWithoutTransferServiceInput, StorageUncheckedCreateWithoutTransferServiceInput> | StorageCreateWithoutTransferServiceInput[] | StorageUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: StorageCreateOrConnectWithoutTransferServiceInput | StorageCreateOrConnectWithoutTransferServiceInput[]
    upsert?: StorageUpsertWithWhereUniqueWithoutTransferServiceInput | StorageUpsertWithWhereUniqueWithoutTransferServiceInput[]
    createMany?: StorageCreateManyTransferServiceInputEnvelope
    set?: StorageWhereUniqueInput | StorageWhereUniqueInput[]
    disconnect?: StorageWhereUniqueInput | StorageWhereUniqueInput[]
    delete?: StorageWhereUniqueInput | StorageWhereUniqueInput[]
    connect?: StorageWhereUniqueInput | StorageWhereUniqueInput[]
    update?: StorageUpdateWithWhereUniqueWithoutTransferServiceInput | StorageUpdateWithWhereUniqueWithoutTransferServiceInput[]
    updateMany?: StorageUpdateManyWithWhereWithoutTransferServiceInput | StorageUpdateManyWithWhereWithoutTransferServiceInput[]
    deleteMany?: StorageScalarWhereInput | StorageScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutTransferServiceNestedInput = {
    create?: XOR<DepartmentCreateWithoutTransferServiceInput, DepartmentUncheckedCreateWithoutTransferServiceInput> | DepartmentCreateWithoutTransferServiceInput[] | DepartmentUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTransferServiceInput | DepartmentCreateOrConnectWithoutTransferServiceInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutTransferServiceInput | DepartmentUpsertWithWhereUniqueWithoutTransferServiceInput[]
    createMany?: DepartmentCreateManyTransferServiceInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutTransferServiceInput | DepartmentUpdateWithWhereUniqueWithoutTransferServiceInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutTransferServiceInput | DepartmentUpdateManyWithWhereWithoutTransferServiceInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type GuarantUpdateManyWithoutTransferServiceNestedInput = {
    create?: XOR<GuarantCreateWithoutTransferServiceInput, GuarantUncheckedCreateWithoutTransferServiceInput> | GuarantCreateWithoutTransferServiceInput[] | GuarantUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutTransferServiceInput | GuarantCreateOrConnectWithoutTransferServiceInput[]
    upsert?: GuarantUpsertWithWhereUniqueWithoutTransferServiceInput | GuarantUpsertWithWhereUniqueWithoutTransferServiceInput[]
    createMany?: GuarantCreateManyTransferServiceInputEnvelope
    set?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    disconnect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    delete?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    update?: GuarantUpdateWithWhereUniqueWithoutTransferServiceInput | GuarantUpdateWithWhereUniqueWithoutTransferServiceInput[]
    updateMany?: GuarantUpdateManyWithWhereWithoutTransferServiceInput | GuarantUpdateManyWithWhereWithoutTransferServiceInput[]
    deleteMany?: GuarantScalarWhereInput | GuarantScalarWhereInput[]
  }

  export type StorageUncheckedUpdateManyWithoutTransferServiceNestedInput = {
    create?: XOR<StorageCreateWithoutTransferServiceInput, StorageUncheckedCreateWithoutTransferServiceInput> | StorageCreateWithoutTransferServiceInput[] | StorageUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: StorageCreateOrConnectWithoutTransferServiceInput | StorageCreateOrConnectWithoutTransferServiceInput[]
    upsert?: StorageUpsertWithWhereUniqueWithoutTransferServiceInput | StorageUpsertWithWhereUniqueWithoutTransferServiceInput[]
    createMany?: StorageCreateManyTransferServiceInputEnvelope
    set?: StorageWhereUniqueInput | StorageWhereUniqueInput[]
    disconnect?: StorageWhereUniqueInput | StorageWhereUniqueInput[]
    delete?: StorageWhereUniqueInput | StorageWhereUniqueInput[]
    connect?: StorageWhereUniqueInput | StorageWhereUniqueInput[]
    update?: StorageUpdateWithWhereUniqueWithoutTransferServiceInput | StorageUpdateWithWhereUniqueWithoutTransferServiceInput[]
    updateMany?: StorageUpdateManyWithWhereWithoutTransferServiceInput | StorageUpdateManyWithWhereWithoutTransferServiceInput[]
    deleteMany?: StorageScalarWhereInput | StorageScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutTransferServiceNestedInput = {
    create?: XOR<DepartmentCreateWithoutTransferServiceInput, DepartmentUncheckedCreateWithoutTransferServiceInput> | DepartmentCreateWithoutTransferServiceInput[] | DepartmentUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTransferServiceInput | DepartmentCreateOrConnectWithoutTransferServiceInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutTransferServiceInput | DepartmentUpsertWithWhereUniqueWithoutTransferServiceInput[]
    createMany?: DepartmentCreateManyTransferServiceInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutTransferServiceInput | DepartmentUpdateWithWhereUniqueWithoutTransferServiceInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutTransferServiceInput | DepartmentUpdateManyWithWhereWithoutTransferServiceInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type GuarantUncheckedUpdateManyWithoutTransferServiceNestedInput = {
    create?: XOR<GuarantCreateWithoutTransferServiceInput, GuarantUncheckedCreateWithoutTransferServiceInput> | GuarantCreateWithoutTransferServiceInput[] | GuarantUncheckedCreateWithoutTransferServiceInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutTransferServiceInput | GuarantCreateOrConnectWithoutTransferServiceInput[]
    upsert?: GuarantUpsertWithWhereUniqueWithoutTransferServiceInput | GuarantUpsertWithWhereUniqueWithoutTransferServiceInput[]
    createMany?: GuarantCreateManyTransferServiceInputEnvelope
    set?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    disconnect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    delete?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    update?: GuarantUpdateWithWhereUniqueWithoutTransferServiceInput | GuarantUpdateWithWhereUniqueWithoutTransferServiceInput[]
    updateMany?: GuarantUpdateManyWithWhereWithoutTransferServiceInput | GuarantUpdateManyWithWhereWithoutTransferServiceInput[]
    deleteMany?: GuarantScalarWhereInput | GuarantScalarWhereInput[]
  }

  export type TransferServiceCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<TransferServiceCreateWithoutDepartmentsInput, TransferServiceUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: TransferServiceCreateOrConnectWithoutDepartmentsInput
    connect?: TransferServiceWhereUniqueInput
  }

  export type TransferServiceUpdateOneWithoutDepartmentsNestedInput = {
    create?: XOR<TransferServiceCreateWithoutDepartmentsInput, TransferServiceUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: TransferServiceCreateOrConnectWithoutDepartmentsInput
    upsert?: TransferServiceUpsertWithoutDepartmentsInput
    disconnect?: TransferServiceWhereInput | boolean
    delete?: TransferServiceWhereInput | boolean
    connect?: TransferServiceWhereUniqueInput
    update?: XOR<XOR<TransferServiceUpdateToOneWithWhereWithoutDepartmentsInput, TransferServiceUpdateWithoutDepartmentsInput>, TransferServiceUncheckedUpdateWithoutDepartmentsInput>
  }

  export type BuyerCreateNestedManyWithoutStorageInput = {
    create?: XOR<BuyerCreateWithoutStorageInput, BuyerUncheckedCreateWithoutStorageInput> | BuyerCreateWithoutStorageInput[] | BuyerUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutStorageInput | BuyerCreateOrConnectWithoutStorageInput[]
    createMany?: BuyerCreateManyStorageInputEnvelope
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
  }

  export type SellerCreateNestedManyWithoutStorageInput = {
    create?: XOR<SellerCreateWithoutStorageInput, SellerUncheckedCreateWithoutStorageInput> | SellerCreateWithoutStorageInput[] | SellerUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: SellerCreateOrConnectWithoutStorageInput | SellerCreateOrConnectWithoutStorageInput[]
    createMany?: SellerCreateManyStorageInputEnvelope
    connect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
  }

  export type GuarantCreateNestedManyWithoutStorageInput = {
    create?: XOR<GuarantCreateWithoutStorageInput, GuarantUncheckedCreateWithoutStorageInput> | GuarantCreateWithoutStorageInput[] | GuarantUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutStorageInput | GuarantCreateOrConnectWithoutStorageInput[]
    createMany?: GuarantCreateManyStorageInputEnvelope
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
  }

  export type TransferServiceCreateNestedOneWithoutStoragesInput = {
    create?: XOR<TransferServiceCreateWithoutStoragesInput, TransferServiceUncheckedCreateWithoutStoragesInput>
    connectOrCreate?: TransferServiceCreateOrConnectWithoutStoragesInput
    connect?: TransferServiceWhereUniqueInput
  }

  export type BuyerUncheckedCreateNestedManyWithoutStorageInput = {
    create?: XOR<BuyerCreateWithoutStorageInput, BuyerUncheckedCreateWithoutStorageInput> | BuyerCreateWithoutStorageInput[] | BuyerUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutStorageInput | BuyerCreateOrConnectWithoutStorageInput[]
    createMany?: BuyerCreateManyStorageInputEnvelope
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
  }

  export type SellerUncheckedCreateNestedManyWithoutStorageInput = {
    create?: XOR<SellerCreateWithoutStorageInput, SellerUncheckedCreateWithoutStorageInput> | SellerCreateWithoutStorageInput[] | SellerUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: SellerCreateOrConnectWithoutStorageInput | SellerCreateOrConnectWithoutStorageInput[]
    createMany?: SellerCreateManyStorageInputEnvelope
    connect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
  }

  export type GuarantUncheckedCreateNestedManyWithoutStorageInput = {
    create?: XOR<GuarantCreateWithoutStorageInput, GuarantUncheckedCreateWithoutStorageInput> | GuarantCreateWithoutStorageInput[] | GuarantUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutStorageInput | GuarantCreateOrConnectWithoutStorageInput[]
    createMany?: GuarantCreateManyStorageInputEnvelope
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
  }

  export type BuyerUpdateManyWithoutStorageNestedInput = {
    create?: XOR<BuyerCreateWithoutStorageInput, BuyerUncheckedCreateWithoutStorageInput> | BuyerCreateWithoutStorageInput[] | BuyerUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutStorageInput | BuyerCreateOrConnectWithoutStorageInput[]
    upsert?: BuyerUpsertWithWhereUniqueWithoutStorageInput | BuyerUpsertWithWhereUniqueWithoutStorageInput[]
    createMany?: BuyerCreateManyStorageInputEnvelope
    set?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    disconnect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    delete?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    update?: BuyerUpdateWithWhereUniqueWithoutStorageInput | BuyerUpdateWithWhereUniqueWithoutStorageInput[]
    updateMany?: BuyerUpdateManyWithWhereWithoutStorageInput | BuyerUpdateManyWithWhereWithoutStorageInput[]
    deleteMany?: BuyerScalarWhereInput | BuyerScalarWhereInput[]
  }

  export type SellerUpdateManyWithoutStorageNestedInput = {
    create?: XOR<SellerCreateWithoutStorageInput, SellerUncheckedCreateWithoutStorageInput> | SellerCreateWithoutStorageInput[] | SellerUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: SellerCreateOrConnectWithoutStorageInput | SellerCreateOrConnectWithoutStorageInput[]
    upsert?: SellerUpsertWithWhereUniqueWithoutStorageInput | SellerUpsertWithWhereUniqueWithoutStorageInput[]
    createMany?: SellerCreateManyStorageInputEnvelope
    set?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    disconnect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    delete?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    connect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    update?: SellerUpdateWithWhereUniqueWithoutStorageInput | SellerUpdateWithWhereUniqueWithoutStorageInput[]
    updateMany?: SellerUpdateManyWithWhereWithoutStorageInput | SellerUpdateManyWithWhereWithoutStorageInput[]
    deleteMany?: SellerScalarWhereInput | SellerScalarWhereInput[]
  }

  export type GuarantUpdateManyWithoutStorageNestedInput = {
    create?: XOR<GuarantCreateWithoutStorageInput, GuarantUncheckedCreateWithoutStorageInput> | GuarantCreateWithoutStorageInput[] | GuarantUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutStorageInput | GuarantCreateOrConnectWithoutStorageInput[]
    upsert?: GuarantUpsertWithWhereUniqueWithoutStorageInput | GuarantUpsertWithWhereUniqueWithoutStorageInput[]
    createMany?: GuarantCreateManyStorageInputEnvelope
    set?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    disconnect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    delete?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    update?: GuarantUpdateWithWhereUniqueWithoutStorageInput | GuarantUpdateWithWhereUniqueWithoutStorageInput[]
    updateMany?: GuarantUpdateManyWithWhereWithoutStorageInput | GuarantUpdateManyWithWhereWithoutStorageInput[]
    deleteMany?: GuarantScalarWhereInput | GuarantScalarWhereInput[]
  }

  export type TransferServiceUpdateOneWithoutStoragesNestedInput = {
    create?: XOR<TransferServiceCreateWithoutStoragesInput, TransferServiceUncheckedCreateWithoutStoragesInput>
    connectOrCreate?: TransferServiceCreateOrConnectWithoutStoragesInput
    upsert?: TransferServiceUpsertWithoutStoragesInput
    disconnect?: TransferServiceWhereInput | boolean
    delete?: TransferServiceWhereInput | boolean
    connect?: TransferServiceWhereUniqueInput
    update?: XOR<XOR<TransferServiceUpdateToOneWithWhereWithoutStoragesInput, TransferServiceUpdateWithoutStoragesInput>, TransferServiceUncheckedUpdateWithoutStoragesInput>
  }

  export type BuyerUncheckedUpdateManyWithoutStorageNestedInput = {
    create?: XOR<BuyerCreateWithoutStorageInput, BuyerUncheckedCreateWithoutStorageInput> | BuyerCreateWithoutStorageInput[] | BuyerUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: BuyerCreateOrConnectWithoutStorageInput | BuyerCreateOrConnectWithoutStorageInput[]
    upsert?: BuyerUpsertWithWhereUniqueWithoutStorageInput | BuyerUpsertWithWhereUniqueWithoutStorageInput[]
    createMany?: BuyerCreateManyStorageInputEnvelope
    set?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    disconnect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    delete?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    connect?: BuyerWhereUniqueInput | BuyerWhereUniqueInput[]
    update?: BuyerUpdateWithWhereUniqueWithoutStorageInput | BuyerUpdateWithWhereUniqueWithoutStorageInput[]
    updateMany?: BuyerUpdateManyWithWhereWithoutStorageInput | BuyerUpdateManyWithWhereWithoutStorageInput[]
    deleteMany?: BuyerScalarWhereInput | BuyerScalarWhereInput[]
  }

  export type SellerUncheckedUpdateManyWithoutStorageNestedInput = {
    create?: XOR<SellerCreateWithoutStorageInput, SellerUncheckedCreateWithoutStorageInput> | SellerCreateWithoutStorageInput[] | SellerUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: SellerCreateOrConnectWithoutStorageInput | SellerCreateOrConnectWithoutStorageInput[]
    upsert?: SellerUpsertWithWhereUniqueWithoutStorageInput | SellerUpsertWithWhereUniqueWithoutStorageInput[]
    createMany?: SellerCreateManyStorageInputEnvelope
    set?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    disconnect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    delete?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    connect?: SellerWhereUniqueInput | SellerWhereUniqueInput[]
    update?: SellerUpdateWithWhereUniqueWithoutStorageInput | SellerUpdateWithWhereUniqueWithoutStorageInput[]
    updateMany?: SellerUpdateManyWithWhereWithoutStorageInput | SellerUpdateManyWithWhereWithoutStorageInput[]
    deleteMany?: SellerScalarWhereInput | SellerScalarWhereInput[]
  }

  export type GuarantUncheckedUpdateManyWithoutStorageNestedInput = {
    create?: XOR<GuarantCreateWithoutStorageInput, GuarantUncheckedCreateWithoutStorageInput> | GuarantCreateWithoutStorageInput[] | GuarantUncheckedCreateWithoutStorageInput[]
    connectOrCreate?: GuarantCreateOrConnectWithoutStorageInput | GuarantCreateOrConnectWithoutStorageInput[]
    upsert?: GuarantUpsertWithWhereUniqueWithoutStorageInput | GuarantUpsertWithWhereUniqueWithoutStorageInput[]
    createMany?: GuarantCreateManyStorageInputEnvelope
    set?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    disconnect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    delete?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    connect?: GuarantWhereUniqueInput | GuarantWhereUniqueInput[]
    update?: GuarantUpdateWithWhereUniqueWithoutStorageInput | GuarantUpdateWithWhereUniqueWithoutStorageInput[]
    updateMany?: GuarantUpdateManyWithWhereWithoutStorageInput | GuarantUpdateManyWithWhereWithoutStorageInput[]
    deleteMany?: GuarantScalarWhereInput | GuarantScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BuyerCreateWithoutSellerInput = {
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    Storage?: StorageCreateNestedOneWithoutBuyersInput
    guarant: GuarantCreateNestedOneWithoutBuyerInput
    Comment?: CommentCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateWithoutSellerInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    storageId?: number | null
    guarantId: number
    Comment?: CommentUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerCreateOrConnectWithoutSellerInput = {
    where: BuyerWhereUniqueInput
    create: XOR<BuyerCreateWithoutSellerInput, BuyerUncheckedCreateWithoutSellerInput>
  }

  export type BuyerCreateManySellerInputEnvelope = {
    data: BuyerCreateManySellerInput | BuyerCreateManySellerInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutSellerInput = {
    name: string
    placed_items_number?: number
    description: string
    placed_items?: ItemCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutSellerInput = {
    id?: number
    name: string
    placed_items_number?: number
    description: string
    placed_items?: ItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutSellerInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutSellerInput, CategoryUncheckedCreateWithoutSellerInput>
  }

  export type StorageCreateWithoutSellersInput = {
    buyers?: BuyerCreateNestedManyWithoutStorageInput
    guarants?: GuarantCreateNestedManyWithoutStorageInput
    TransferService?: TransferServiceCreateNestedOneWithoutStoragesInput
  }

  export type StorageUncheckedCreateWithoutSellersInput = {
    id?: number
    transferServiceId?: number | null
    buyers?: BuyerUncheckedCreateNestedManyWithoutStorageInput
    guarants?: GuarantUncheckedCreateNestedManyWithoutStorageInput
  }

  export type StorageCreateOrConnectWithoutSellersInput = {
    where: StorageWhereUniqueInput
    create: XOR<StorageCreateWithoutSellersInput, StorageUncheckedCreateWithoutSellersInput>
  }

  export type GuarantCreateWithoutSellerInput = {
    Buyer?: BuyerCreateNestedManyWithoutGuarantInput
    TransferService?: TransferServiceCreateNestedOneWithoutGuarantsInput
    Storage?: StorageCreateNestedOneWithoutGuarantsInput
  }

  export type GuarantUncheckedCreateWithoutSellerInput = {
    id?: number
    transferServiceId?: number | null
    storageId?: number | null
    Buyer?: BuyerUncheckedCreateNestedManyWithoutGuarantInput
  }

  export type GuarantCreateOrConnectWithoutSellerInput = {
    where: GuarantWhereUniqueInput
    create: XOR<GuarantCreateWithoutSellerInput, GuarantUncheckedCreateWithoutSellerInput>
  }

  export type GuarantCreateManySellerInputEnvelope = {
    data: GuarantCreateManySellerInput | GuarantCreateManySellerInput[]
    skipDuplicates?: boolean
  }

  export type BuyerUpsertWithWhereUniqueWithoutSellerInput = {
    where: BuyerWhereUniqueInput
    update: XOR<BuyerUpdateWithoutSellerInput, BuyerUncheckedUpdateWithoutSellerInput>
    create: XOR<BuyerCreateWithoutSellerInput, BuyerUncheckedCreateWithoutSellerInput>
  }

  export type BuyerUpdateWithWhereUniqueWithoutSellerInput = {
    where: BuyerWhereUniqueInput
    data: XOR<BuyerUpdateWithoutSellerInput, BuyerUncheckedUpdateWithoutSellerInput>
  }

  export type BuyerUpdateManyWithWhereWithoutSellerInput = {
    where: BuyerScalarWhereInput
    data: XOR<BuyerUpdateManyMutationInput, BuyerUncheckedUpdateManyWithoutSellerInput>
  }

  export type BuyerScalarWhereInput = {
    AND?: BuyerScalarWhereInput | BuyerScalarWhereInput[]
    OR?: BuyerScalarWhereInput[]
    NOT?: BuyerScalarWhereInput | BuyerScalarWhereInput[]
    id?: IntFilter<"Buyer"> | number
    createdAt?: DateTimeFilter<"Buyer"> | Date | string
    first_name?: StringFilter<"Buyer"> | string
    middle_name?: StringFilter<"Buyer"> | string
    last_name?: StringFilter<"Buyer"> | string
    birth_date?: DateTimeFilter<"Buyer"> | Date | string
    bio?: StringNullableFilter<"Buyer"> | string | null
    last_time_online?: DateTimeFilter<"Buyer"> | Date | string
    bought_items?: IntFilter<"Buyer"> | number
    joined?: DateTimeFilter<"Buyer"> | Date | string
    sellerId?: IntNullableFilter<"Buyer"> | number | null
    storageId?: IntNullableFilter<"Buyer"> | number | null
    guarantId?: IntFilter<"Buyer"> | number
  }

  export type CategoryUpsertWithoutSellerInput = {
    update: XOR<CategoryUpdateWithoutSellerInput, CategoryUncheckedUpdateWithoutSellerInput>
    create: XOR<CategoryCreateWithoutSellerInput, CategoryUncheckedCreateWithoutSellerInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutSellerInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutSellerInput, CategoryUncheckedUpdateWithoutSellerInput>
  }

  export type CategoryUpdateWithoutSellerInput = {
    name?: StringFieldUpdateOperationsInput | string
    placed_items_number?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    placed_items?: ItemUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutSellerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    placed_items_number?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    placed_items?: ItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type StorageUpsertWithoutSellersInput = {
    update: XOR<StorageUpdateWithoutSellersInput, StorageUncheckedUpdateWithoutSellersInput>
    create: XOR<StorageCreateWithoutSellersInput, StorageUncheckedCreateWithoutSellersInput>
    where?: StorageWhereInput
  }

  export type StorageUpdateToOneWithWhereWithoutSellersInput = {
    where?: StorageWhereInput
    data: XOR<StorageUpdateWithoutSellersInput, StorageUncheckedUpdateWithoutSellersInput>
  }

  export type StorageUpdateWithoutSellersInput = {
    buyers?: BuyerUpdateManyWithoutStorageNestedInput
    guarants?: GuarantUpdateManyWithoutStorageNestedInput
    TransferService?: TransferServiceUpdateOneWithoutStoragesNestedInput
  }

  export type StorageUncheckedUpdateWithoutSellersInput = {
    id?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
    buyers?: BuyerUncheckedUpdateManyWithoutStorageNestedInput
    guarants?: GuarantUncheckedUpdateManyWithoutStorageNestedInput
  }

  export type GuarantUpsertWithWhereUniqueWithoutSellerInput = {
    where: GuarantWhereUniqueInput
    update: XOR<GuarantUpdateWithoutSellerInput, GuarantUncheckedUpdateWithoutSellerInput>
    create: XOR<GuarantCreateWithoutSellerInput, GuarantUncheckedCreateWithoutSellerInput>
  }

  export type GuarantUpdateWithWhereUniqueWithoutSellerInput = {
    where: GuarantWhereUniqueInput
    data: XOR<GuarantUpdateWithoutSellerInput, GuarantUncheckedUpdateWithoutSellerInput>
  }

  export type GuarantUpdateManyWithWhereWithoutSellerInput = {
    where: GuarantScalarWhereInput
    data: XOR<GuarantUpdateManyMutationInput, GuarantUncheckedUpdateManyWithoutSellerInput>
  }

  export type GuarantScalarWhereInput = {
    AND?: GuarantScalarWhereInput | GuarantScalarWhereInput[]
    OR?: GuarantScalarWhereInput[]
    NOT?: GuarantScalarWhereInput | GuarantScalarWhereInput[]
    id?: IntFilter<"Guarant"> | number
    sellerId?: IntFilter<"Guarant"> | number
    transferServiceId?: IntNullableFilter<"Guarant"> | number | null
    storageId?: IntNullableFilter<"Guarant"> | number | null
  }

  export type SellerCreateWithoutMost_frequent_buyersInput = {
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    favourite_category?: CategoryCreateNestedOneWithoutSellerInput
    Storage?: StorageCreateNestedOneWithoutSellersInput
    Guarant?: GuarantCreateNestedManyWithoutSellerInput
  }

  export type SellerUncheckedCreateWithoutMost_frequent_buyersInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    categoryId?: number | null
    storageId?: number | null
    Guarant?: GuarantUncheckedCreateNestedManyWithoutSellerInput
  }

  export type SellerCreateOrConnectWithoutMost_frequent_buyersInput = {
    where: SellerWhereUniqueInput
    create: XOR<SellerCreateWithoutMost_frequent_buyersInput, SellerUncheckedCreateWithoutMost_frequent_buyersInput>
  }

  export type StorageCreateWithoutBuyersInput = {
    sellers?: SellerCreateNestedManyWithoutStorageInput
    guarants?: GuarantCreateNestedManyWithoutStorageInput
    TransferService?: TransferServiceCreateNestedOneWithoutStoragesInput
  }

  export type StorageUncheckedCreateWithoutBuyersInput = {
    id?: number
    transferServiceId?: number | null
    sellers?: SellerUncheckedCreateNestedManyWithoutStorageInput
    guarants?: GuarantUncheckedCreateNestedManyWithoutStorageInput
  }

  export type StorageCreateOrConnectWithoutBuyersInput = {
    where: StorageWhereUniqueInput
    create: XOR<StorageCreateWithoutBuyersInput, StorageUncheckedCreateWithoutBuyersInput>
  }

  export type GuarantCreateWithoutBuyerInput = {
    seller: SellerCreateNestedOneWithoutGuarantInput
    TransferService?: TransferServiceCreateNestedOneWithoutGuarantsInput
    Storage?: StorageCreateNestedOneWithoutGuarantsInput
  }

  export type GuarantUncheckedCreateWithoutBuyerInput = {
    id?: number
    sellerId: number
    transferServiceId?: number | null
    storageId?: number | null
  }

  export type GuarantCreateOrConnectWithoutBuyerInput = {
    where: GuarantWhereUniqueInput
    create: XOR<GuarantCreateWithoutBuyerInput, GuarantUncheckedCreateWithoutBuyerInput>
  }

  export type CommentCreateWithoutBuyerInput = {
    title: string
    body: string
  }

  export type CommentUncheckedCreateWithoutBuyerInput = {
    id?: number
    title: string
    body: string
  }

  export type CommentCreateOrConnectWithoutBuyerInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutBuyerInput, CommentUncheckedCreateWithoutBuyerInput>
  }

  export type CommentCreateManyBuyerInputEnvelope = {
    data: CommentCreateManyBuyerInput | CommentCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type SellerUpsertWithoutMost_frequent_buyersInput = {
    update: XOR<SellerUpdateWithoutMost_frequent_buyersInput, SellerUncheckedUpdateWithoutMost_frequent_buyersInput>
    create: XOR<SellerCreateWithoutMost_frequent_buyersInput, SellerUncheckedCreateWithoutMost_frequent_buyersInput>
    where?: SellerWhereInput
  }

  export type SellerUpdateToOneWithWhereWithoutMost_frequent_buyersInput = {
    where?: SellerWhereInput
    data: XOR<SellerUpdateWithoutMost_frequent_buyersInput, SellerUncheckedUpdateWithoutMost_frequent_buyersInput>
  }

  export type SellerUpdateWithoutMost_frequent_buyersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    favourite_category?: CategoryUpdateOneWithoutSellerNestedInput
    Storage?: StorageUpdateOneWithoutSellersNestedInput
    Guarant?: GuarantUpdateManyWithoutSellerNestedInput
  }

  export type SellerUncheckedUpdateWithoutMost_frequent_buyersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    Guarant?: GuarantUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type StorageUpsertWithoutBuyersInput = {
    update: XOR<StorageUpdateWithoutBuyersInput, StorageUncheckedUpdateWithoutBuyersInput>
    create: XOR<StorageCreateWithoutBuyersInput, StorageUncheckedCreateWithoutBuyersInput>
    where?: StorageWhereInput
  }

  export type StorageUpdateToOneWithWhereWithoutBuyersInput = {
    where?: StorageWhereInput
    data: XOR<StorageUpdateWithoutBuyersInput, StorageUncheckedUpdateWithoutBuyersInput>
  }

  export type StorageUpdateWithoutBuyersInput = {
    sellers?: SellerUpdateManyWithoutStorageNestedInput
    guarants?: GuarantUpdateManyWithoutStorageNestedInput
    TransferService?: TransferServiceUpdateOneWithoutStoragesNestedInput
  }

  export type StorageUncheckedUpdateWithoutBuyersInput = {
    id?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
    sellers?: SellerUncheckedUpdateManyWithoutStorageNestedInput
    guarants?: GuarantUncheckedUpdateManyWithoutStorageNestedInput
  }

  export type GuarantUpsertWithoutBuyerInput = {
    update: XOR<GuarantUpdateWithoutBuyerInput, GuarantUncheckedUpdateWithoutBuyerInput>
    create: XOR<GuarantCreateWithoutBuyerInput, GuarantUncheckedCreateWithoutBuyerInput>
    where?: GuarantWhereInput
  }

  export type GuarantUpdateToOneWithWhereWithoutBuyerInput = {
    where?: GuarantWhereInput
    data: XOR<GuarantUpdateWithoutBuyerInput, GuarantUncheckedUpdateWithoutBuyerInput>
  }

  export type GuarantUpdateWithoutBuyerInput = {
    seller?: SellerUpdateOneRequiredWithoutGuarantNestedInput
    TransferService?: TransferServiceUpdateOneWithoutGuarantsNestedInput
    Storage?: StorageUpdateOneWithoutGuarantsNestedInput
  }

  export type GuarantUncheckedUpdateWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentUpsertWithWhereUniqueWithoutBuyerInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutBuyerInput, CommentUncheckedUpdateWithoutBuyerInput>
    create: XOR<CommentCreateWithoutBuyerInput, CommentUncheckedCreateWithoutBuyerInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutBuyerInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutBuyerInput, CommentUncheckedUpdateWithoutBuyerInput>
  }

  export type CommentUpdateManyWithWhereWithoutBuyerInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutBuyerInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: IntFilter<"Comment"> | number
    title?: StringFilter<"Comment"> | string
    body?: StringFilter<"Comment"> | string
    buyerId?: IntFilter<"Comment"> | number
  }

  export type SellerCreateWithoutFavourite_categoryInput = {
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    most_frequent_buyers?: BuyerCreateNestedManyWithoutSellerInput
    Storage?: StorageCreateNestedOneWithoutSellersInput
    Guarant?: GuarantCreateNestedManyWithoutSellerInput
  }

  export type SellerUncheckedCreateWithoutFavourite_categoryInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    storageId?: number | null
    most_frequent_buyers?: BuyerUncheckedCreateNestedManyWithoutSellerInput
    Guarant?: GuarantUncheckedCreateNestedManyWithoutSellerInput
  }

  export type SellerCreateOrConnectWithoutFavourite_categoryInput = {
    where: SellerWhereUniqueInput
    create: XOR<SellerCreateWithoutFavourite_categoryInput, SellerUncheckedCreateWithoutFavourite_categoryInput>
  }

  export type SellerCreateManyFavourite_categoryInputEnvelope = {
    data: SellerCreateManyFavourite_categoryInput | SellerCreateManyFavourite_categoryInput[]
    skipDuplicates?: boolean
  }

  export type ItemCreateWithoutCategoryInput = {
    name: string
    createdAt?: Date | string
    placedAt?: Date | string | null
    description: string
  }

  export type ItemUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    createdAt?: Date | string
    placedAt?: Date | string | null
    description: string
  }

  export type ItemCreateOrConnectWithoutCategoryInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput>
  }

  export type ItemCreateManyCategoryInputEnvelope = {
    data: ItemCreateManyCategoryInput | ItemCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type SellerUpsertWithWhereUniqueWithoutFavourite_categoryInput = {
    where: SellerWhereUniqueInput
    update: XOR<SellerUpdateWithoutFavourite_categoryInput, SellerUncheckedUpdateWithoutFavourite_categoryInput>
    create: XOR<SellerCreateWithoutFavourite_categoryInput, SellerUncheckedCreateWithoutFavourite_categoryInput>
  }

  export type SellerUpdateWithWhereUniqueWithoutFavourite_categoryInput = {
    where: SellerWhereUniqueInput
    data: XOR<SellerUpdateWithoutFavourite_categoryInput, SellerUncheckedUpdateWithoutFavourite_categoryInput>
  }

  export type SellerUpdateManyWithWhereWithoutFavourite_categoryInput = {
    where: SellerScalarWhereInput
    data: XOR<SellerUpdateManyMutationInput, SellerUncheckedUpdateManyWithoutFavourite_categoryInput>
  }

  export type SellerScalarWhereInput = {
    AND?: SellerScalarWhereInput | SellerScalarWhereInput[]
    OR?: SellerScalarWhereInput[]
    NOT?: SellerScalarWhereInput | SellerScalarWhereInput[]
    id?: IntFilter<"Seller"> | number
    createdAt?: DateTimeFilter<"Seller"> | Date | string
    first_name?: StringFilter<"Seller"> | string
    middle_name?: StringFilter<"Seller"> | string
    last_name?: StringFilter<"Seller"> | string
    birth_date?: DateTimeFilter<"Seller"> | Date | string
    bio?: StringNullableFilter<"Seller"> | string | null
    last_time_online?: DateTimeFilter<"Seller"> | Date | string
    sold_items?: IntFilter<"Seller"> | number
    joined?: DateTimeFilter<"Seller"> | Date | string
    total_items_placed?: IntFilter<"Seller"> | number
    items_placed_now?: IntFilter<"Seller"> | number
    categoryId?: IntNullableFilter<"Seller"> | number | null
    storageId?: IntNullableFilter<"Seller"> | number | null
  }

  export type ItemUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutCategoryInput, ItemUncheckedUpdateWithoutCategoryInput>
    create: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutCategoryInput, ItemUncheckedUpdateWithoutCategoryInput>
  }

  export type ItemUpdateManyWithWhereWithoutCategoryInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ItemScalarWhereInput = {
    AND?: ItemScalarWhereInput | ItemScalarWhereInput[]
    OR?: ItemScalarWhereInput[]
    NOT?: ItemScalarWhereInput | ItemScalarWhereInput[]
    id?: IntFilter<"Item"> | number
    categoryId?: IntNullableFilter<"Item"> | number | null
    name?: StringFilter<"Item"> | string
    createdAt?: DateTimeFilter<"Item"> | Date | string
    placedAt?: DateTimeNullableFilter<"Item"> | Date | string | null
    description?: StringFilter<"Item"> | string
  }

  export type CategoryCreateWithoutPlaced_itemsInput = {
    name: string
    placed_items_number?: number
    description: string
    Seller?: SellerCreateNestedManyWithoutFavourite_categoryInput
  }

  export type CategoryUncheckedCreateWithoutPlaced_itemsInput = {
    id?: number
    name: string
    placed_items_number?: number
    description: string
    Seller?: SellerUncheckedCreateNestedManyWithoutFavourite_categoryInput
  }

  export type CategoryCreateOrConnectWithoutPlaced_itemsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutPlaced_itemsInput, CategoryUncheckedCreateWithoutPlaced_itemsInput>
  }

  export type CategoryUpsertWithoutPlaced_itemsInput = {
    update: XOR<CategoryUpdateWithoutPlaced_itemsInput, CategoryUncheckedUpdateWithoutPlaced_itemsInput>
    create: XOR<CategoryCreateWithoutPlaced_itemsInput, CategoryUncheckedCreateWithoutPlaced_itemsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutPlaced_itemsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutPlaced_itemsInput, CategoryUncheckedUpdateWithoutPlaced_itemsInput>
  }

  export type CategoryUpdateWithoutPlaced_itemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    placed_items_number?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Seller?: SellerUpdateManyWithoutFavourite_categoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutPlaced_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    placed_items_number?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Seller?: SellerUncheckedUpdateManyWithoutFavourite_categoryNestedInput
  }

  export type BuyerCreateWithoutCommentInput = {
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    Seller?: SellerCreateNestedOneWithoutMost_frequent_buyersInput
    Storage?: StorageCreateNestedOneWithoutBuyersInput
    guarant: GuarantCreateNestedOneWithoutBuyerInput
  }

  export type BuyerUncheckedCreateWithoutCommentInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    sellerId?: number | null
    storageId?: number | null
    guarantId: number
  }

  export type BuyerCreateOrConnectWithoutCommentInput = {
    where: BuyerWhereUniqueInput
    create: XOR<BuyerCreateWithoutCommentInput, BuyerUncheckedCreateWithoutCommentInput>
  }

  export type BuyerUpsertWithoutCommentInput = {
    update: XOR<BuyerUpdateWithoutCommentInput, BuyerUncheckedUpdateWithoutCommentInput>
    create: XOR<BuyerCreateWithoutCommentInput, BuyerUncheckedCreateWithoutCommentInput>
    where?: BuyerWhereInput
  }

  export type BuyerUpdateToOneWithWhereWithoutCommentInput = {
    where?: BuyerWhereInput
    data: XOR<BuyerUpdateWithoutCommentInput, BuyerUncheckedUpdateWithoutCommentInput>
  }

  export type BuyerUpdateWithoutCommentInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    Seller?: SellerUpdateOneWithoutMost_frequent_buyersNestedInput
    Storage?: StorageUpdateOneWithoutBuyersNestedInput
    guarant?: GuarantUpdateOneRequiredWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    sellerId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    guarantId?: IntFieldUpdateOperationsInput | number
  }

  export type SellerCreateWithoutGuarantInput = {
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    most_frequent_buyers?: BuyerCreateNestedManyWithoutSellerInput
    favourite_category?: CategoryCreateNestedOneWithoutSellerInput
    Storage?: StorageCreateNestedOneWithoutSellersInput
  }

  export type SellerUncheckedCreateWithoutGuarantInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    categoryId?: number | null
    storageId?: number | null
    most_frequent_buyers?: BuyerUncheckedCreateNestedManyWithoutSellerInput
  }

  export type SellerCreateOrConnectWithoutGuarantInput = {
    where: SellerWhereUniqueInput
    create: XOR<SellerCreateWithoutGuarantInput, SellerUncheckedCreateWithoutGuarantInput>
  }

  export type BuyerCreateWithoutGuarantInput = {
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    Seller?: SellerCreateNestedOneWithoutMost_frequent_buyersInput
    Storage?: StorageCreateNestedOneWithoutBuyersInput
    Comment?: CommentCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateWithoutGuarantInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    sellerId?: number | null
    storageId?: number | null
    Comment?: CommentUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerCreateOrConnectWithoutGuarantInput = {
    where: BuyerWhereUniqueInput
    create: XOR<BuyerCreateWithoutGuarantInput, BuyerUncheckedCreateWithoutGuarantInput>
  }

  export type BuyerCreateManyGuarantInputEnvelope = {
    data: BuyerCreateManyGuarantInput | BuyerCreateManyGuarantInput[]
    skipDuplicates?: boolean
  }

  export type TransferServiceCreateWithoutGuarantsInput = {
    storages?: StorageCreateNestedManyWithoutTransferServiceInput
    departments?: DepartmentCreateNestedManyWithoutTransferServiceInput
  }

  export type TransferServiceUncheckedCreateWithoutGuarantsInput = {
    id?: number
    storages?: StorageUncheckedCreateNestedManyWithoutTransferServiceInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTransferServiceInput
  }

  export type TransferServiceCreateOrConnectWithoutGuarantsInput = {
    where: TransferServiceWhereUniqueInput
    create: XOR<TransferServiceCreateWithoutGuarantsInput, TransferServiceUncheckedCreateWithoutGuarantsInput>
  }

  export type StorageCreateWithoutGuarantsInput = {
    buyers?: BuyerCreateNestedManyWithoutStorageInput
    sellers?: SellerCreateNestedManyWithoutStorageInput
    TransferService?: TransferServiceCreateNestedOneWithoutStoragesInput
  }

  export type StorageUncheckedCreateWithoutGuarantsInput = {
    id?: number
    transferServiceId?: number | null
    buyers?: BuyerUncheckedCreateNestedManyWithoutStorageInput
    sellers?: SellerUncheckedCreateNestedManyWithoutStorageInput
  }

  export type StorageCreateOrConnectWithoutGuarantsInput = {
    where: StorageWhereUniqueInput
    create: XOR<StorageCreateWithoutGuarantsInput, StorageUncheckedCreateWithoutGuarantsInput>
  }

  export type SellerUpsertWithoutGuarantInput = {
    update: XOR<SellerUpdateWithoutGuarantInput, SellerUncheckedUpdateWithoutGuarantInput>
    create: XOR<SellerCreateWithoutGuarantInput, SellerUncheckedCreateWithoutGuarantInput>
    where?: SellerWhereInput
  }

  export type SellerUpdateToOneWithWhereWithoutGuarantInput = {
    where?: SellerWhereInput
    data: XOR<SellerUpdateWithoutGuarantInput, SellerUncheckedUpdateWithoutGuarantInput>
  }

  export type SellerUpdateWithoutGuarantInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    most_frequent_buyers?: BuyerUpdateManyWithoutSellerNestedInput
    favourite_category?: CategoryUpdateOneWithoutSellerNestedInput
    Storage?: StorageUpdateOneWithoutSellersNestedInput
  }

  export type SellerUncheckedUpdateWithoutGuarantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    most_frequent_buyers?: BuyerUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type BuyerUpsertWithWhereUniqueWithoutGuarantInput = {
    where: BuyerWhereUniqueInput
    update: XOR<BuyerUpdateWithoutGuarantInput, BuyerUncheckedUpdateWithoutGuarantInput>
    create: XOR<BuyerCreateWithoutGuarantInput, BuyerUncheckedCreateWithoutGuarantInput>
  }

  export type BuyerUpdateWithWhereUniqueWithoutGuarantInput = {
    where: BuyerWhereUniqueInput
    data: XOR<BuyerUpdateWithoutGuarantInput, BuyerUncheckedUpdateWithoutGuarantInput>
  }

  export type BuyerUpdateManyWithWhereWithoutGuarantInput = {
    where: BuyerScalarWhereInput
    data: XOR<BuyerUpdateManyMutationInput, BuyerUncheckedUpdateManyWithoutGuarantInput>
  }

  export type TransferServiceUpsertWithoutGuarantsInput = {
    update: XOR<TransferServiceUpdateWithoutGuarantsInput, TransferServiceUncheckedUpdateWithoutGuarantsInput>
    create: XOR<TransferServiceCreateWithoutGuarantsInput, TransferServiceUncheckedCreateWithoutGuarantsInput>
    where?: TransferServiceWhereInput
  }

  export type TransferServiceUpdateToOneWithWhereWithoutGuarantsInput = {
    where?: TransferServiceWhereInput
    data: XOR<TransferServiceUpdateWithoutGuarantsInput, TransferServiceUncheckedUpdateWithoutGuarantsInput>
  }

  export type TransferServiceUpdateWithoutGuarantsInput = {
    storages?: StorageUpdateManyWithoutTransferServiceNestedInput
    departments?: DepartmentUpdateManyWithoutTransferServiceNestedInput
  }

  export type TransferServiceUncheckedUpdateWithoutGuarantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    storages?: StorageUncheckedUpdateManyWithoutTransferServiceNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTransferServiceNestedInput
  }

  export type StorageUpsertWithoutGuarantsInput = {
    update: XOR<StorageUpdateWithoutGuarantsInput, StorageUncheckedUpdateWithoutGuarantsInput>
    create: XOR<StorageCreateWithoutGuarantsInput, StorageUncheckedCreateWithoutGuarantsInput>
    where?: StorageWhereInput
  }

  export type StorageUpdateToOneWithWhereWithoutGuarantsInput = {
    where?: StorageWhereInput
    data: XOR<StorageUpdateWithoutGuarantsInput, StorageUncheckedUpdateWithoutGuarantsInput>
  }

  export type StorageUpdateWithoutGuarantsInput = {
    buyers?: BuyerUpdateManyWithoutStorageNestedInput
    sellers?: SellerUpdateManyWithoutStorageNestedInput
    TransferService?: TransferServiceUpdateOneWithoutStoragesNestedInput
  }

  export type StorageUncheckedUpdateWithoutGuarantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
    buyers?: BuyerUncheckedUpdateManyWithoutStorageNestedInput
    sellers?: SellerUncheckedUpdateManyWithoutStorageNestedInput
  }

  export type StorageCreateWithoutTransferServiceInput = {
    buyers?: BuyerCreateNestedManyWithoutStorageInput
    sellers?: SellerCreateNestedManyWithoutStorageInput
    guarants?: GuarantCreateNestedManyWithoutStorageInput
  }

  export type StorageUncheckedCreateWithoutTransferServiceInput = {
    id?: number
    buyers?: BuyerUncheckedCreateNestedManyWithoutStorageInput
    sellers?: SellerUncheckedCreateNestedManyWithoutStorageInput
    guarants?: GuarantUncheckedCreateNestedManyWithoutStorageInput
  }

  export type StorageCreateOrConnectWithoutTransferServiceInput = {
    where: StorageWhereUniqueInput
    create: XOR<StorageCreateWithoutTransferServiceInput, StorageUncheckedCreateWithoutTransferServiceInput>
  }

  export type StorageCreateManyTransferServiceInputEnvelope = {
    data: StorageCreateManyTransferServiceInput | StorageCreateManyTransferServiceInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutTransferServiceInput = {

  }

  export type DepartmentUncheckedCreateWithoutTransferServiceInput = {
    id?: number
  }

  export type DepartmentCreateOrConnectWithoutTransferServiceInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTransferServiceInput, DepartmentUncheckedCreateWithoutTransferServiceInput>
  }

  export type DepartmentCreateManyTransferServiceInputEnvelope = {
    data: DepartmentCreateManyTransferServiceInput | DepartmentCreateManyTransferServiceInput[]
    skipDuplicates?: boolean
  }

  export type GuarantCreateWithoutTransferServiceInput = {
    seller: SellerCreateNestedOneWithoutGuarantInput
    Buyer?: BuyerCreateNestedManyWithoutGuarantInput
    Storage?: StorageCreateNestedOneWithoutGuarantsInput
  }

  export type GuarantUncheckedCreateWithoutTransferServiceInput = {
    id?: number
    sellerId: number
    storageId?: number | null
    Buyer?: BuyerUncheckedCreateNestedManyWithoutGuarantInput
  }

  export type GuarantCreateOrConnectWithoutTransferServiceInput = {
    where: GuarantWhereUniqueInput
    create: XOR<GuarantCreateWithoutTransferServiceInput, GuarantUncheckedCreateWithoutTransferServiceInput>
  }

  export type GuarantCreateManyTransferServiceInputEnvelope = {
    data: GuarantCreateManyTransferServiceInput | GuarantCreateManyTransferServiceInput[]
    skipDuplicates?: boolean
  }

  export type StorageUpsertWithWhereUniqueWithoutTransferServiceInput = {
    where: StorageWhereUniqueInput
    update: XOR<StorageUpdateWithoutTransferServiceInput, StorageUncheckedUpdateWithoutTransferServiceInput>
    create: XOR<StorageCreateWithoutTransferServiceInput, StorageUncheckedCreateWithoutTransferServiceInput>
  }

  export type StorageUpdateWithWhereUniqueWithoutTransferServiceInput = {
    where: StorageWhereUniqueInput
    data: XOR<StorageUpdateWithoutTransferServiceInput, StorageUncheckedUpdateWithoutTransferServiceInput>
  }

  export type StorageUpdateManyWithWhereWithoutTransferServiceInput = {
    where: StorageScalarWhereInput
    data: XOR<StorageUpdateManyMutationInput, StorageUncheckedUpdateManyWithoutTransferServiceInput>
  }

  export type StorageScalarWhereInput = {
    AND?: StorageScalarWhereInput | StorageScalarWhereInput[]
    OR?: StorageScalarWhereInput[]
    NOT?: StorageScalarWhereInput | StorageScalarWhereInput[]
    id?: IntFilter<"Storage"> | number
    transferServiceId?: IntNullableFilter<"Storage"> | number | null
  }

  export type DepartmentUpsertWithWhereUniqueWithoutTransferServiceInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutTransferServiceInput, DepartmentUncheckedUpdateWithoutTransferServiceInput>
    create: XOR<DepartmentCreateWithoutTransferServiceInput, DepartmentUncheckedCreateWithoutTransferServiceInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutTransferServiceInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutTransferServiceInput, DepartmentUncheckedUpdateWithoutTransferServiceInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutTransferServiceInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutTransferServiceInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: IntFilter<"Department"> | number
    transferServiceId?: IntNullableFilter<"Department"> | number | null
  }

  export type GuarantUpsertWithWhereUniqueWithoutTransferServiceInput = {
    where: GuarantWhereUniqueInput
    update: XOR<GuarantUpdateWithoutTransferServiceInput, GuarantUncheckedUpdateWithoutTransferServiceInput>
    create: XOR<GuarantCreateWithoutTransferServiceInput, GuarantUncheckedCreateWithoutTransferServiceInput>
  }

  export type GuarantUpdateWithWhereUniqueWithoutTransferServiceInput = {
    where: GuarantWhereUniqueInput
    data: XOR<GuarantUpdateWithoutTransferServiceInput, GuarantUncheckedUpdateWithoutTransferServiceInput>
  }

  export type GuarantUpdateManyWithWhereWithoutTransferServiceInput = {
    where: GuarantScalarWhereInput
    data: XOR<GuarantUpdateManyMutationInput, GuarantUncheckedUpdateManyWithoutTransferServiceInput>
  }

  export type TransferServiceCreateWithoutDepartmentsInput = {
    storages?: StorageCreateNestedManyWithoutTransferServiceInput
    guarants?: GuarantCreateNestedManyWithoutTransferServiceInput
  }

  export type TransferServiceUncheckedCreateWithoutDepartmentsInput = {
    id?: number
    storages?: StorageUncheckedCreateNestedManyWithoutTransferServiceInput
    guarants?: GuarantUncheckedCreateNestedManyWithoutTransferServiceInput
  }

  export type TransferServiceCreateOrConnectWithoutDepartmentsInput = {
    where: TransferServiceWhereUniqueInput
    create: XOR<TransferServiceCreateWithoutDepartmentsInput, TransferServiceUncheckedCreateWithoutDepartmentsInput>
  }

  export type TransferServiceUpsertWithoutDepartmentsInput = {
    update: XOR<TransferServiceUpdateWithoutDepartmentsInput, TransferServiceUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<TransferServiceCreateWithoutDepartmentsInput, TransferServiceUncheckedCreateWithoutDepartmentsInput>
    where?: TransferServiceWhereInput
  }

  export type TransferServiceUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: TransferServiceWhereInput
    data: XOR<TransferServiceUpdateWithoutDepartmentsInput, TransferServiceUncheckedUpdateWithoutDepartmentsInput>
  }

  export type TransferServiceUpdateWithoutDepartmentsInput = {
    storages?: StorageUpdateManyWithoutTransferServiceNestedInput
    guarants?: GuarantUpdateManyWithoutTransferServiceNestedInput
  }

  export type TransferServiceUncheckedUpdateWithoutDepartmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    storages?: StorageUncheckedUpdateManyWithoutTransferServiceNestedInput
    guarants?: GuarantUncheckedUpdateManyWithoutTransferServiceNestedInput
  }

  export type BuyerCreateWithoutStorageInput = {
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    Seller?: SellerCreateNestedOneWithoutMost_frequent_buyersInput
    guarant: GuarantCreateNestedOneWithoutBuyerInput
    Comment?: CommentCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateWithoutStorageInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    sellerId?: number | null
    guarantId: number
    Comment?: CommentUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerCreateOrConnectWithoutStorageInput = {
    where: BuyerWhereUniqueInput
    create: XOR<BuyerCreateWithoutStorageInput, BuyerUncheckedCreateWithoutStorageInput>
  }

  export type BuyerCreateManyStorageInputEnvelope = {
    data: BuyerCreateManyStorageInput | BuyerCreateManyStorageInput[]
    skipDuplicates?: boolean
  }

  export type SellerCreateWithoutStorageInput = {
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    most_frequent_buyers?: BuyerCreateNestedManyWithoutSellerInput
    favourite_category?: CategoryCreateNestedOneWithoutSellerInput
    Guarant?: GuarantCreateNestedManyWithoutSellerInput
  }

  export type SellerUncheckedCreateWithoutStorageInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    categoryId?: number | null
    most_frequent_buyers?: BuyerUncheckedCreateNestedManyWithoutSellerInput
    Guarant?: GuarantUncheckedCreateNestedManyWithoutSellerInput
  }

  export type SellerCreateOrConnectWithoutStorageInput = {
    where: SellerWhereUniqueInput
    create: XOR<SellerCreateWithoutStorageInput, SellerUncheckedCreateWithoutStorageInput>
  }

  export type SellerCreateManyStorageInputEnvelope = {
    data: SellerCreateManyStorageInput | SellerCreateManyStorageInput[]
    skipDuplicates?: boolean
  }

  export type GuarantCreateWithoutStorageInput = {
    seller: SellerCreateNestedOneWithoutGuarantInput
    Buyer?: BuyerCreateNestedManyWithoutGuarantInput
    TransferService?: TransferServiceCreateNestedOneWithoutGuarantsInput
  }

  export type GuarantUncheckedCreateWithoutStorageInput = {
    id?: number
    sellerId: number
    transferServiceId?: number | null
    Buyer?: BuyerUncheckedCreateNestedManyWithoutGuarantInput
  }

  export type GuarantCreateOrConnectWithoutStorageInput = {
    where: GuarantWhereUniqueInput
    create: XOR<GuarantCreateWithoutStorageInput, GuarantUncheckedCreateWithoutStorageInput>
  }

  export type GuarantCreateManyStorageInputEnvelope = {
    data: GuarantCreateManyStorageInput | GuarantCreateManyStorageInput[]
    skipDuplicates?: boolean
  }

  export type TransferServiceCreateWithoutStoragesInput = {
    departments?: DepartmentCreateNestedManyWithoutTransferServiceInput
    guarants?: GuarantCreateNestedManyWithoutTransferServiceInput
  }

  export type TransferServiceUncheckedCreateWithoutStoragesInput = {
    id?: number
    departments?: DepartmentUncheckedCreateNestedManyWithoutTransferServiceInput
    guarants?: GuarantUncheckedCreateNestedManyWithoutTransferServiceInput
  }

  export type TransferServiceCreateOrConnectWithoutStoragesInput = {
    where: TransferServiceWhereUniqueInput
    create: XOR<TransferServiceCreateWithoutStoragesInput, TransferServiceUncheckedCreateWithoutStoragesInput>
  }

  export type BuyerUpsertWithWhereUniqueWithoutStorageInput = {
    where: BuyerWhereUniqueInput
    update: XOR<BuyerUpdateWithoutStorageInput, BuyerUncheckedUpdateWithoutStorageInput>
    create: XOR<BuyerCreateWithoutStorageInput, BuyerUncheckedCreateWithoutStorageInput>
  }

  export type BuyerUpdateWithWhereUniqueWithoutStorageInput = {
    where: BuyerWhereUniqueInput
    data: XOR<BuyerUpdateWithoutStorageInput, BuyerUncheckedUpdateWithoutStorageInput>
  }

  export type BuyerUpdateManyWithWhereWithoutStorageInput = {
    where: BuyerScalarWhereInput
    data: XOR<BuyerUpdateManyMutationInput, BuyerUncheckedUpdateManyWithoutStorageInput>
  }

  export type SellerUpsertWithWhereUniqueWithoutStorageInput = {
    where: SellerWhereUniqueInput
    update: XOR<SellerUpdateWithoutStorageInput, SellerUncheckedUpdateWithoutStorageInput>
    create: XOR<SellerCreateWithoutStorageInput, SellerUncheckedCreateWithoutStorageInput>
  }

  export type SellerUpdateWithWhereUniqueWithoutStorageInput = {
    where: SellerWhereUniqueInput
    data: XOR<SellerUpdateWithoutStorageInput, SellerUncheckedUpdateWithoutStorageInput>
  }

  export type SellerUpdateManyWithWhereWithoutStorageInput = {
    where: SellerScalarWhereInput
    data: XOR<SellerUpdateManyMutationInput, SellerUncheckedUpdateManyWithoutStorageInput>
  }

  export type GuarantUpsertWithWhereUniqueWithoutStorageInput = {
    where: GuarantWhereUniqueInput
    update: XOR<GuarantUpdateWithoutStorageInput, GuarantUncheckedUpdateWithoutStorageInput>
    create: XOR<GuarantCreateWithoutStorageInput, GuarantUncheckedCreateWithoutStorageInput>
  }

  export type GuarantUpdateWithWhereUniqueWithoutStorageInput = {
    where: GuarantWhereUniqueInput
    data: XOR<GuarantUpdateWithoutStorageInput, GuarantUncheckedUpdateWithoutStorageInput>
  }

  export type GuarantUpdateManyWithWhereWithoutStorageInput = {
    where: GuarantScalarWhereInput
    data: XOR<GuarantUpdateManyMutationInput, GuarantUncheckedUpdateManyWithoutStorageInput>
  }

  export type TransferServiceUpsertWithoutStoragesInput = {
    update: XOR<TransferServiceUpdateWithoutStoragesInput, TransferServiceUncheckedUpdateWithoutStoragesInput>
    create: XOR<TransferServiceCreateWithoutStoragesInput, TransferServiceUncheckedCreateWithoutStoragesInput>
    where?: TransferServiceWhereInput
  }

  export type TransferServiceUpdateToOneWithWhereWithoutStoragesInput = {
    where?: TransferServiceWhereInput
    data: XOR<TransferServiceUpdateWithoutStoragesInput, TransferServiceUncheckedUpdateWithoutStoragesInput>
  }

  export type TransferServiceUpdateWithoutStoragesInput = {
    departments?: DepartmentUpdateManyWithoutTransferServiceNestedInput
    guarants?: GuarantUpdateManyWithoutTransferServiceNestedInput
  }

  export type TransferServiceUncheckedUpdateWithoutStoragesInput = {
    id?: IntFieldUpdateOperationsInput | number
    departments?: DepartmentUncheckedUpdateManyWithoutTransferServiceNestedInput
    guarants?: GuarantUncheckedUpdateManyWithoutTransferServiceNestedInput
  }

  export type BuyerCreateManySellerInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    storageId?: number | null
    guarantId: number
  }

  export type GuarantCreateManySellerInput = {
    id?: number
    transferServiceId?: number | null
    storageId?: number | null
  }

  export type BuyerUpdateWithoutSellerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    Storage?: StorageUpdateOneWithoutBuyersNestedInput
    guarant?: GuarantUpdateOneRequiredWithoutBuyerNestedInput
    Comment?: CommentUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateWithoutSellerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    guarantId?: IntFieldUpdateOperationsInput | number
    Comment?: CommentUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateManyWithoutSellerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    guarantId?: IntFieldUpdateOperationsInput | number
  }

  export type GuarantUpdateWithoutSellerInput = {
    Buyer?: BuyerUpdateManyWithoutGuarantNestedInput
    TransferService?: TransferServiceUpdateOneWithoutGuarantsNestedInput
    Storage?: StorageUpdateOneWithoutGuarantsNestedInput
  }

  export type GuarantUncheckedUpdateWithoutSellerInput = {
    id?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    Buyer?: BuyerUncheckedUpdateManyWithoutGuarantNestedInput
  }

  export type GuarantUncheckedUpdateManyWithoutSellerInput = {
    id?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentCreateManyBuyerInput = {
    id?: number
    title: string
    body: string
  }

  export type CommentUpdateWithoutBuyerInput = {
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
  }

  export type SellerCreateManyFavourite_categoryInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    storageId?: number | null
  }

  export type ItemCreateManyCategoryInput = {
    id?: number
    name: string
    createdAt?: Date | string
    placedAt?: Date | string | null
    description: string
  }

  export type SellerUpdateWithoutFavourite_categoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    most_frequent_buyers?: BuyerUpdateManyWithoutSellerNestedInput
    Storage?: StorageUpdateOneWithoutSellersNestedInput
    Guarant?: GuarantUpdateManyWithoutSellerNestedInput
  }

  export type SellerUncheckedUpdateWithoutFavourite_categoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    most_frequent_buyers?: BuyerUncheckedUpdateManyWithoutSellerNestedInput
    Guarant?: GuarantUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type SellerUncheckedUpdateManyWithoutFavourite_categoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ItemUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    placedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ItemUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    placedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ItemUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    placedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type BuyerCreateManyGuarantInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    sellerId?: number | null
    storageId?: number | null
  }

  export type BuyerUpdateWithoutGuarantInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    Seller?: SellerUpdateOneWithoutMost_frequent_buyersNestedInput
    Storage?: StorageUpdateOneWithoutBuyersNestedInput
    Comment?: CommentUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateWithoutGuarantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    sellerId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    Comment?: CommentUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateManyWithoutGuarantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    sellerId?: NullableIntFieldUpdateOperationsInput | number | null
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StorageCreateManyTransferServiceInput = {
    id?: number
  }

  export type DepartmentCreateManyTransferServiceInput = {
    id?: number
  }

  export type GuarantCreateManyTransferServiceInput = {
    id?: number
    sellerId: number
    storageId?: number | null
  }

  export type StorageUpdateWithoutTransferServiceInput = {
    buyers?: BuyerUpdateManyWithoutStorageNestedInput
    sellers?: SellerUpdateManyWithoutStorageNestedInput
    guarants?: GuarantUpdateManyWithoutStorageNestedInput
  }

  export type StorageUncheckedUpdateWithoutTransferServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyers?: BuyerUncheckedUpdateManyWithoutStorageNestedInput
    sellers?: SellerUncheckedUpdateManyWithoutStorageNestedInput
    guarants?: GuarantUncheckedUpdateManyWithoutStorageNestedInput
  }

  export type StorageUncheckedUpdateManyWithoutTransferServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentUpdateWithoutTransferServiceInput = {

  }

  export type DepartmentUncheckedUpdateWithoutTransferServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentUncheckedUpdateManyWithoutTransferServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type GuarantUpdateWithoutTransferServiceInput = {
    seller?: SellerUpdateOneRequiredWithoutGuarantNestedInput
    Buyer?: BuyerUpdateManyWithoutGuarantNestedInput
    Storage?: StorageUpdateOneWithoutGuarantsNestedInput
  }

  export type GuarantUncheckedUpdateWithoutTransferServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
    Buyer?: BuyerUncheckedUpdateManyWithoutGuarantNestedInput
  }

  export type GuarantUncheckedUpdateManyWithoutTransferServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    storageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BuyerCreateManyStorageInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    bought_items?: number
    joined: Date | string
    sellerId?: number | null
    guarantId: number
  }

  export type SellerCreateManyStorageInput = {
    id?: number
    createdAt?: Date | string
    first_name: string
    middle_name: string
    last_name: string
    birth_date: Date | string
    bio?: string | null
    last_time_online?: Date | string
    sold_items?: number
    joined: Date | string
    total_items_placed: number
    items_placed_now: number
    categoryId?: number | null
  }

  export type GuarantCreateManyStorageInput = {
    id?: number
    sellerId: number
    transferServiceId?: number | null
  }

  export type BuyerUpdateWithoutStorageInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    Seller?: SellerUpdateOneWithoutMost_frequent_buyersNestedInput
    guarant?: GuarantUpdateOneRequiredWithoutBuyerNestedInput
    Comment?: CommentUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateWithoutStorageInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    sellerId?: NullableIntFieldUpdateOperationsInput | number | null
    guarantId?: IntFieldUpdateOperationsInput | number
    Comment?: CommentUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateManyWithoutStorageInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    bought_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    sellerId?: NullableIntFieldUpdateOperationsInput | number | null
    guarantId?: IntFieldUpdateOperationsInput | number
  }

  export type SellerUpdateWithoutStorageInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    most_frequent_buyers?: BuyerUpdateManyWithoutSellerNestedInput
    favourite_category?: CategoryUpdateOneWithoutSellerNestedInput
    Guarant?: GuarantUpdateManyWithoutSellerNestedInput
  }

  export type SellerUncheckedUpdateWithoutStorageInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    most_frequent_buyers?: BuyerUncheckedUpdateManyWithoutSellerNestedInput
    Guarant?: GuarantUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type SellerUncheckedUpdateManyWithoutStorageInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    last_time_online?: DateTimeFieldUpdateOperationsInput | Date | string
    sold_items?: IntFieldUpdateOperationsInput | number
    joined?: DateTimeFieldUpdateOperationsInput | Date | string
    total_items_placed?: IntFieldUpdateOperationsInput | number
    items_placed_now?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GuarantUpdateWithoutStorageInput = {
    seller?: SellerUpdateOneRequiredWithoutGuarantNestedInput
    Buyer?: BuyerUpdateManyWithoutGuarantNestedInput
    TransferService?: TransferServiceUpdateOneWithoutGuarantsNestedInput
  }

  export type GuarantUncheckedUpdateWithoutStorageInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
    Buyer?: BuyerUncheckedUpdateManyWithoutGuarantNestedInput
  }

  export type GuarantUncheckedUpdateManyWithoutStorageInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    transferServiceId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SellerCountOutputTypeDefaultArgs instead
     */
    export type SellerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SellerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BuyerCountOutputTypeDefaultArgs instead
     */
    export type BuyerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BuyerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GuarantCountOutputTypeDefaultArgs instead
     */
    export type GuarantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GuarantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransferServiceCountOutputTypeDefaultArgs instead
     */
    export type TransferServiceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransferServiceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StorageCountOutputTypeDefaultArgs instead
     */
    export type StorageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StorageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SellerDefaultArgs instead
     */
    export type SellerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SellerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BuyerDefaultArgs instead
     */
    export type BuyerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BuyerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemDefaultArgs instead
     */
    export type ItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GuarantDefaultArgs instead
     */
    export type GuarantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GuarantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransferServiceDefaultArgs instead
     */
    export type TransferServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransferServiceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentDefaultArgs instead
     */
    export type DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StorageDefaultArgs instead
     */
    export type StorageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StorageDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}